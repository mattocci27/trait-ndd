── Attaching packages ─────────────────────────────────────── tidyverse 1.3.1 ──
✔ ggplot2 3.3.5     ✔ purrr   0.3.4
✔ tibble  3.1.5     ✔ dplyr   1.0.7
✔ tidyr   1.1.3     ✔ stringr 1.4.0
✔ readr   2.0.0     ✔ forcats 0.5.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ dplyr::filter() masks stats::filter()
✖ dplyr::lag()    masks stats::lag()
Loading required package: StanHeaders
rstan (Version 2.21.2, GitRev: 2e1f913d3ca3)
For execution on a local, multicore CPU with excess RAM we recommend calling
options(mc.cores = parallel::detectCores()).
To avoid recompilation of unchanged Stan programs, we recommend calling
rstan_options(auto_write = TRUE)

Attaching package: ‘rstan’

The following object is masked from ‘package:tidyr’:

    extract

This is bayesplot version 1.8.1
- Online documentation and vignettes at mc-stan.org/bayesplot
- bayesplot theme set to bayesplot::theme_default()
   * Does _not_ affect other ggplot2 plots
   * See ?bayesplot_theme_set for details on theme setting
[1] "Model  model_inter"
[1] "Model for  dry season"
[1] "Use full"
[1] "Habitat = Full"
[1] "n_iter = 4000"
[1] "n_warm = 2000"
[1] "n_thin = 1"
[1] "n_chains = 4"
[1] "adapt_delta = 0.95"
[1] "minimum sp abund = 50"
Rows: 62258 Columns: 19
── Column specification ────────────────────────────────────────────────────────
Delimiter: ","
chr  (7): tag, quadrat, SPcode, date, census, season, habitat
dbl (12): qua, gx, gy, plot, height, year, survive, CONS, CONA, HETA, HETS, ...

ℹ Use `spec()` to retrieve the full column specification for this data.
ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.
Rows: 150 Columns: 4
── Column specification ────────────────────────────────────────────────────────
Delimiter: ","
chr (2): habit3, habit5
dbl (2): qua, seedtrap

ℹ Use `spec()` to retrieve the full column specification for this data.
ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.
Rows: 166 Columns: 13
── Column specification ────────────────────────────────────────────────────────
Delimiter: ","
chr  (1): SPcode
dbl (12): LDMC, WD, SDMC, LA, SLA, Chl, LT, C13, C, N, CN, tlp

ℹ Use `spec()` to retrieve the full column specification for this data.
ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.
No. of species
76
[1] "Sp-level: except for WD"
[1] "sp number in seedling data: 76"
[1] "sp number in trait data: 76"
data{
  int<lower=0> N; // number of sample
  int<lower=1> J; // number of sp
  int<lower=1> K; // number of tree-level preditor (i.e, CONS, HETS,...)
  int<lower=1> L; // number of sp-level predictor (i.e., interecept and WP)
  int<lower=1> M; // number of seedling individuals (tag)
  int<lower=1> S; // number of site
  int<lower=1> T; // number of census
  matrix[N, K] x; // tree-level predictor
  matrix[J, L] u; // sp-level predictor
  int<lower=0,upper=1> suv[N]; // 1 or 0
  int<lower=1,upper=J> sp[N]; // integer
  int<lower=1,upper=S> plot[N]; // integer
  int<lower=1,upper=T> census[N]; // integer
  int<lower=1> tag[N]; // integer
}

parameters{
  matrix[K, J] z;
  vector[S] phi_raw;
  vector[T] xi_raw;
  vector[M] psi_raw;
  matrix[L, K] gamma;
  cholesky_factor_corr[K] L_Omega;
  vector<lower=0,upper=pi()/2>[K] tau_unif;
  vector<lower=0,upper=pi()/2>[3] sig_unif;
}

transformed parameters{
  matrix[J, K] beta;
  vector<lower=0>[K] tau;
  vector<lower=0>[3] sig;
  vector[S] phi;
  vector[T] xi;
  vector[M] psi;
  for (k in 1:K) tau[k] = 2.5 * tan(tau_unif[k]); // implies tau ~ cauchy(0, 2.5)
  for (i in 1:3) sig[i] = 2.5 * tan(sig_unif[i]); // implies sig ~ cauchy(0, 2.5)
  beta = u * gamma + (diag_pre_multiply(tau,L_Omega) * z)';
  phi = phi_raw * sig[1];
  xi = xi_raw * sig[2];
  psi = psi_raw * sig[3];
}

model {
  // Hyper-priors
  to_vector(z) ~ std_normal();
  to_vector(phi_raw) ~ std_normal();
  to_vector(xi_raw) ~ std_normal();
  to_vector(psi_raw) ~ std_normal();
  L_Omega ~ lkj_corr_cholesky(2); // uniform of L_Omega * L_Omega'
  // Priors
  to_vector(gamma) ~ normal(0, 5);
  // Likelihood
  suv ~ bernoulli_logit(rows_dot_product(beta[sp] , x) + phi[plot] + xi[census] + psi[tag]);
}

generated quantities {
  vector[N] log_lik;
  corr_matrix[K] Omega;
  Omega = multiply_lower_tri_self_transpose(L_Omega);
  for (n in 1:N) {
    log_lik[n] = bernoulli_logit_lpmf(suv[n] | dot_product(beta[sp[n],] , x[n,]) + phi[plot[n]] + xi[census[n]] + psi[tag[n]]);
  }
}
[1] "use c = 0.27 as a scaling parameter for the distance effect"
[1] "n_sp = J =76"
[1] "n_para = K = 11"
[1] "n_plot = S = 384"
[1] "n_census = T = 10"
[1] "n_tag = M = 9153"
[1] "L = 6"

CHECKING DATA AND PREPROCESSING FOR MODEL 'model_inter' NOW.

COMPILING MODEL 'model_inter' NOW.

STARTING SAMPLER FOR MODEL 'model_inter' NOW.

CHECKING DATA AND PREPROCESSING FOR MODEL 'model_inter' NOW.

CHECKING DATA AND PREPROCESSING FOR MODEL 'model_inter' NOW.

COMPILING MODEL 'model_inter' NOW.

STARTING SAMPLER FOR MODEL 'model_inter' NOW.

CHECKING DATA AND PREPROCESSING FOR MODEL 'model_inter' NOW.

COMPILING MODEL 'model_inter' NOW.

STARTING SAMPLER FOR MODEL 'model_inter' NOW.

CHECKING DATA AND PREPROCESSING FOR MODEL 'model_inter' NOW.

COMPILING MODEL 'model_inter' NOW.

STARTING SAMPLER FOR MODEL 'model_inter' NOW.

COMPILING MODEL 'model_inter' NOW.

STARTING SAMPLER FOR MODEL 'model_inter' NOW.

SAMPLING FOR MODEL 'model_inter' NOW (CHAIN 1).

SAMPLING FOR MODEL 'model_inter' NOW (CHAIN 2).

SAMPLING FOR MODEL 'model_inter' NOW (CHAIN 3).

SAMPLING FOR MODEL 'model_inter' NOW (CHAIN 4).
Chain 3: 
Chain 3: Gradient evaluation took 0.016998 seconds
Chain 3: 1000 transitions using 10 leapfrog steps per transition would take 169.98 seconds.
Chain 3: Adjust your expectations accordingly!
Chain 3: 
Chain 3: 
Chain 1: 
Chain 1: Gradient evaluation took 0.018062 seconds
Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 180.62 seconds.
Chain 1: Adjust your expectations accordingly!
Chain 1: 
Chain 1: 
Chain 4: 
Chain 4: Gradient evaluation took 0.017728 seconds
Chain 4: 1000 transitions using 10 leapfrog steps per transition would take 177.28 seconds.
Chain 4: Adjust your expectations accordingly!
Chain 4: 
Chain 4: 
Chain 2: 
Chain 2: Gradient evaluation took 0.019196 seconds
Chain 2: 1000 transitions using 10 leapfrog steps per transition would take 191.96 seconds.
Chain 2: Adjust your expectations accordingly!
Chain 2: 
Chain 2: 
Chain 3: Iteration:    1 / 4000 [  0%]  (Warmup)
Chain 1: Iteration:    1 / 4000 [  0%]  (Warmup)
Chain 4: Iteration:    1 / 4000 [  0%]  (Warmup)
Chain 2: Iteration:    1 / 4000 [  0%]  (Warmup)
Chain 2: Exception: validate transformed params: y is not positive definite.  (in 'model1ff5b1ac786a2_model_inter' at line 59)

Chain 1: Iteration:  200 / 4000 [  5%]  (Warmup)
Chain 3: Iteration:  200 / 4000 [  5%]  (Warmup)
Chain 2: Iteration:  200 / 4000 [  5%]  (Warmup)
Chain 4: Iteration:  200 / 4000 [  5%]  (Warmup)
Chain 1: Iteration:  400 / 4000 [ 10%]  (Warmup)
Chain 2: Iteration:  400 / 4000 [ 10%]  (Warmup)
Chain 3: Iteration:  400 / 4000 [ 10%]  (Warmup)
Chain 4: Iteration:  400 / 4000 [ 10%]  (Warmup)
Chain 2: Iteration:  600 / 4000 [ 15%]  (Warmup)
Chain 1: Iteration:  600 / 4000 [ 15%]  (Warmup)
Chain 3: Iteration:  600 / 4000 [ 15%]  (Warmup)
Chain 4: Iteration:  600 / 4000 [ 15%]  (Warmup)
Chain 2: Iteration:  800 / 4000 [ 20%]  (Warmup)
Chain 1: Iteration:  800 / 4000 [ 20%]  (Warmup)
Chain 3: Iteration:  800 / 4000 [ 20%]  (Warmup)
Chain 4: Iteration:  800 / 4000 [ 20%]  (Warmup)
Chain 2: Iteration: 1000 / 4000 [ 25%]  (Warmup)
Chain 3: Iteration: 1000 / 4000 [ 25%]  (Warmup)
Chain 1: Iteration: 1000 / 4000 [ 25%]  (Warmup)
Chain 4: Iteration: 1000 / 4000 [ 25%]  (Warmup)
Chain 2: Iteration: 1200 / 4000 [ 30%]  (Warmup)
Chain 1: Iteration: 1200 / 4000 [ 30%]  (Warmup)
Chain 3: Iteration: 1200 / 4000 [ 30%]  (Warmup)
Chain 4: Iteration: 1200 / 4000 [ 30%]  (Warmup)
Chain 2: Iteration: 1400 / 4000 [ 35%]  (Warmup)
Chain 1: Iteration: 1400 / 4000 [ 35%]  (Warmup)
Chain 3: Iteration: 1400 / 4000 [ 35%]  (Warmup)
Chain 4: Iteration: 1400 / 4000 [ 35%]  (Warmup)
Chain 2: Iteration: 1600 / 4000 [ 40%]  (Warmup)
Chain 1: Iteration: 1600 / 4000 [ 40%]  (Warmup)
Chain 3: Iteration: 1600 / 4000 [ 40%]  (Warmup)
Chain 4: Iteration: 1600 / 4000 [ 40%]  (Warmup)
Chain 2: Iteration: 1800 / 4000 [ 45%]  (Warmup)
Chain 1: Iteration: 1800 / 4000 [ 45%]  (Warmup)
Chain 3: Iteration: 1800 / 4000 [ 45%]  (Warmup)
Chain 4: Iteration: 1800 / 4000 [ 45%]  (Warmup)
Chain 2: Iteration: 2000 / 4000 [ 50%]  (Warmup)
Chain 2: Iteration: 2001 / 4000 [ 50%]  (Sampling)
Chain 1: Iteration: 2000 / 4000 [ 50%]  (Warmup)
Chain 1: Iteration: 2001 / 4000 [ 50%]  (Sampling)
Chain 3: Iteration: 2000 / 4000 [ 50%]  (Warmup)
Chain 3: Iteration: 2001 / 4000 [ 50%]  (Sampling)
Chain 4: Iteration: 2000 / 4000 [ 50%]  (Warmup)
Chain 4: Iteration: 2001 / 4000 [ 50%]  (Sampling)
Chain 2: Iteration: 2200 / 4000 [ 55%]  (Sampling)
Chain 1: Iteration: 2200 / 4000 [ 55%]  (Sampling)
Chain 3: Iteration: 2200 / 4000 [ 55%]  (Sampling)
Chain 4: Iteration: 2200 / 4000 [ 55%]  (Sampling)
Chain 2: Iteration: 2400 / 4000 [ 60%]  (Sampling)
Chain 1: Iteration: 2400 / 4000 [ 60%]  (Sampling)
Chain 3: Iteration: 2400 / 4000 [ 60%]  (Sampling)
Chain 4: Iteration: 2400 / 4000 [ 60%]  (Sampling)
Chain 2: Iteration: 2600 / 4000 [ 65%]  (Sampling)
Chain 1: Iteration: 2600 / 4000 [ 65%]  (Sampling)
Chain 3: Iteration: 2600 / 4000 [ 65%]  (Sampling)
Chain 4: Iteration: 2600 / 4000 [ 65%]  (Sampling)
Chain 2: Iteration: 2800 / 4000 [ 70%]  (Sampling)
Chain 1: Iteration: 2800 / 4000 [ 70%]  (Sampling)
Chain 3: Iteration: 2800 / 4000 [ 70%]  (Sampling)
Chain 4: Iteration: 2800 / 4000 [ 70%]  (Sampling)
Chain 2: Iteration: 3000 / 4000 [ 75%]  (Sampling)
Chain 1: Iteration: 3000 / 4000 [ 75%]  (Sampling)
Chain 3: Iteration: 3000 / 4000 [ 75%]  (Sampling)
Chain 4: Iteration: 3000 / 4000 [ 75%]  (Sampling)
Chain 2: Iteration: 3200 / 4000 [ 80%]  (Sampling)
Chain 1: Iteration: 3200 / 4000 [ 80%]  (Sampling)
Chain 3: Iteration: 3200 / 4000 [ 80%]  (Sampling)
Chain 4: Iteration: 3200 / 4000 [ 80%]  (Sampling)
Chain 2: Iteration: 3400 / 4000 [ 85%]  (Sampling)
Chain 1: Iteration: 3400 / 4000 [ 85%]  (Sampling)
Chain 3: Iteration: 3400 / 4000 [ 85%]  (Sampling)
Chain 4: Iteration: 3400 / 4000 [ 85%]  (Sampling)
Chain 2: Iteration: 3600 / 4000 [ 90%]  (Sampling)
Chain 1: Iteration: 3600 / 4000 [ 90%]  (Sampling)
Chain 3: Iteration: 3600 / 4000 [ 90%]  (Sampling)
Chain 4: Iteration: 3600 / 4000 [ 90%]  (Sampling)
Chain 2: Iteration: 3800 / 4000 [ 95%]  (Sampling)
Chain 1: Iteration: 3800 / 4000 [ 95%]  (Sampling)
Chain 3: Iteration: 3800 / 4000 [ 95%]  (Sampling)
Chain 4: Iteration: 3800 / 4000 [ 95%]  (Sampling)
Chain 2: Iteration: 4000 / 4000 [100%]  (Sampling)
Chain 2: 
Chain 2:  Elapsed Time: 20581.3 seconds (Warm-up)
Chain 2:                10803.2 seconds (Sampling)
Chain 2:                31384.5 seconds (Total)
Chain 2: 
Chain 1: Iteration: 4000 / 4000 [100%]  (Sampling)
Chain 1: 
Chain 1:  Elapsed Time: 20759.2 seconds (Warm-up)
Chain 1:                10759.1 seconds (Sampling)
Chain 1:                31518.3 seconds (Total)
Chain 1: 
Chain 3: Iteration: 4000 / 4000 [100%]  (Sampling)
Chain 3: 
Chain 3:  Elapsed Time: 20811.7 seconds (Warm-up)
Chain 3:                10735.1 seconds (Sampling)
Chain 3:                31546.8 seconds (Total)
Chain 3: 
Chain 4: Iteration: 4000 / 4000 [100%]  (Sampling)
Chain 4: 
Chain 4:  Elapsed Time: 21248.6 seconds (Warm-up)
Chain 4:                10588.2 seconds (Sampling)
Chain 4:                31836.9 seconds (Total)
Chain 4: 
Warning message:
In validityMethod(object) :
  The following variables have undefined values:  Omega[1,1],The following variables have undefined values:  Omega[2,1],The following variables have undefined values:  Omega[3,1],The following variables have undefined values:  Omega[4,1],The following variables have undefined values:  Omega[5,1],The following variables have undefined values:  Omega[6,1],The following variables have undefined values:  Omega[7,1],The following variables have undefined values:  Omega[8,1],The following variables have undefined values:  Omega[9,1],The following variables have undefined values:  Omega[10,1],The following variables have undefined values:  Omega[11,1],The following variables have undefined values:  Omega[1,2],The following variables have undefined values:  Omega[2,2],The following variables have undefined values:  Omega[3,2],The following variables have undefined values:  Omega[4,2],The following variables have undefined values:  Omega[5,2],The following variables have undefined values:  Omega[ [... truncated]
Inference for Stan model: model_inter.
4 chains, each with iter=4000; warmup=2000; thin=1; 
post-warmup draws per chain=2000, total post-warmup draws=8000.

                 mean se_mean     sd      2.5%       25%       50%       75%
gamma[1,1]       2.28    0.01   0.37      1.59      2.02      2.27      2.52
gamma[1,2]      -2.34    0.02   0.64     -3.63     -2.75     -2.32     -1.91
gamma[1,3]      -0.20    0.00   0.21     -0.63     -0.34     -0.20     -0.06
gamma[1,4]       0.16    0.00   0.07      0.04      0.12      0.16      0.20
gamma[1,5]      -0.08    0.00   0.09     -0.27     -0.14     -0.08     -0.02
gamma[1,6]      -0.35    0.01   0.22     -0.79     -0.49     -0.35     -0.20
gamma[1,7]      -0.46    0.01   0.32     -1.11     -0.67     -0.46     -0.25
gamma[1,8]      -0.14    0.00   0.11     -0.36     -0.21     -0.13     -0.06
gamma[1,9]      -0.02    0.00   0.06     -0.13     -0.06     -0.03      0.01
gamma[1,10]      0.00    0.00   0.06     -0.13     -0.04      0.00      0.04
gamma[1,11]      1.08    0.00   0.10      0.88      1.01      1.07      1.14
gamma[2,1]      -1.06    0.01   0.53     -2.12     -1.41     -1.05     -0.71
gamma[2,2]      -1.43    0.02   0.92     -3.22     -2.04     -1.43     -0.81
gamma[2,3]      -0.20    0.01   0.33     -0.85     -0.40     -0.19      0.02
gamma[2,4]       0.06    0.00   0.08     -0.11      0.00      0.06      0.11
gamma[2,5]       0.04    0.00   0.11     -0.18     -0.03      0.04      0.11
gamma[2,6]      -0.36    0.01   0.33     -1.01     -0.57     -0.35     -0.14
gamma[2,7]      -0.58    0.02   0.57     -1.75     -0.96     -0.57     -0.20
gamma[2,8]      -0.06    0.00   0.17     -0.39     -0.17     -0.06      0.06
gamma[2,9]      -0.05    0.00   0.08     -0.20     -0.10     -0.05      0.01
gamma[2,10]     -0.04    0.00   0.08     -0.19     -0.09     -0.04      0.01
gamma[2,11]      0.13    0.00   0.13     -0.13      0.05      0.13      0.22
gamma[3,1]       1.12    0.01   0.43      0.27      0.84      1.13      1.41
gamma[3,2]       2.48    0.02   0.79      0.95      1.94      2.48      2.99
gamma[3,3]      -0.04    0.01   0.26     -0.53     -0.21     -0.04      0.13
gamma[3,4]      -0.07    0.00   0.08     -0.23     -0.12     -0.07     -0.01
gamma[3,5]      -0.01    0.00   0.11     -0.24     -0.08     -0.01      0.06
gamma[3,6]       0.46    0.01   0.27     -0.07      0.27      0.46      0.64
gamma[3,7]       0.62    0.01   0.52     -0.39      0.27      0.62      0.97
gamma[3,8]       0.09    0.00   0.14     -0.18      0.00      0.09      0.18
gamma[3,9]       0.04    0.00   0.07     -0.10     -0.01      0.04      0.09
gamma[3,10]      0.05    0.00   0.08     -0.10      0.00      0.05      0.10
gamma[3,11]      0.04    0.00   0.13     -0.22     -0.05      0.04      0.12
gamma[4,1]      -0.08    0.01   0.36     -0.79     -0.31     -0.07      0.17
gamma[4,2]      -0.69    0.01   0.54     -1.82     -1.03     -0.68     -0.32
gamma[4,3]      -0.02    0.01   0.26     -0.50     -0.19     -0.03      0.15
gamma[4,4]       0.04    0.00   0.07     -0.09     -0.01      0.04      0.08
gamma[4,5]      -0.13    0.00   0.09     -0.31     -0.19     -0.13     -0.07
gamma[4,6]      -0.17    0.00   0.18     -0.54     -0.29     -0.17     -0.05
gamma[4,7]      -0.24    0.01   0.27     -0.78     -0.42     -0.24     -0.06
gamma[4,8]      -0.06    0.00   0.12     -0.30     -0.14     -0.06      0.02
gamma[4,9]      -0.03    0.00   0.06     -0.15     -0.07     -0.03      0.02
gamma[4,10]      0.04    0.00   0.06     -0.08      0.00      0.04      0.08
gamma[4,11]      0.13    0.00   0.11     -0.09      0.06      0.13      0.21
gamma[5,1]      -0.85    0.01   0.30     -1.46     -1.05     -0.85     -0.65
gamma[5,2]      -1.22    0.01   0.59     -2.41     -1.61     -1.20     -0.83
gamma[5,3]       0.01    0.00   0.19     -0.36     -0.12      0.01      0.13
gamma[5,4]       0.04    0.00   0.06     -0.09      0.00      0.04      0.08
gamma[5,5]      -0.08    0.00   0.10     -0.28     -0.15     -0.08     -0.02
gamma[5,6]      -0.27    0.01   0.21     -0.72     -0.41     -0.27     -0.13
gamma[5,7]      -0.39    0.01   0.38     -1.17     -0.64     -0.38     -0.13
gamma[5,8]      -0.04    0.00   0.11     -0.27     -0.11     -0.03      0.04
gamma[5,9]      -0.03    0.00   0.05     -0.13     -0.06     -0.03      0.01
gamma[5,10]      0.04    0.00   0.06     -0.09     -0.01      0.04      0.08
gamma[5,11]     -0.08    0.00   0.11     -0.29     -0.15     -0.08     -0.01
gamma[6,1]      -0.06    0.01   0.38     -0.82     -0.31     -0.06      0.19
gamma[6,2]      -0.22    0.02   0.65     -1.49     -0.65     -0.22      0.20
gamma[6,3]      -0.07    0.01   0.29     -0.68     -0.27     -0.05      0.13
gamma[6,4]      -0.02    0.00   0.07     -0.15     -0.07     -0.02      0.02
gamma[6,5]       0.14    0.00   0.09     -0.04      0.07      0.13      0.20
gamma[6,6]      -0.14    0.01   0.21     -0.55     -0.27     -0.14      0.00
gamma[6,7]      -0.36    0.01   0.31     -0.98     -0.56     -0.35     -0.15
gamma[6,8]       0.02    0.00   0.15     -0.27     -0.08      0.02      0.12
gamma[6,9]       0.00    0.00   0.06     -0.12     -0.04      0.00      0.04
gamma[6,10]     -0.03    0.00   0.06     -0.15     -0.07     -0.03      0.01
gamma[6,11]      0.01    0.00   0.12     -0.23     -0.07      0.01      0.08
sig[1]           0.52    0.00   0.04      0.44      0.49      0.52      0.54
sig[2]           0.44    0.00   0.14      0.25      0.34      0.41      0.51
sig[3]           0.88    0.00   0.09      0.70      0.82      0.88      0.95
lp__        -13382.69    6.54 152.61 -13680.65 -13486.83 -13381.53 -13279.71
                97.5% n_eff Rhat
gamma[1,1]       3.02  1090 1.00
gamma[1,2]      -1.13  1184 1.00
gamma[1,3]       0.20  2706 1.00
gamma[1,4]       0.29  3965 1.00
gamma[1,5]       0.10  3693 1.00
gamma[1,6]       0.12  1799 1.00
gamma[1,7]       0.18  2141 1.00
gamma[1,8]       0.07  3213 1.00
gamma[1,9]       0.09  5286 1.00
gamma[1,10]      0.11  4924 1.00
gamma[1,11]      1.27  2965 1.00
gamma[2,1]      -0.04  1461 1.00
gamma[2,2]       0.36  1775 1.00
gamma[2,3]       0.44  1900 1.00
gamma[2,4]       0.22  3452 1.00
gamma[2,5]       0.26  3149 1.00
gamma[2,6]       0.26  1205 1.00
gamma[2,7]       0.49  1343 1.00
gamma[2,8]       0.28  2003 1.00
gamma[2,9]       0.11  3853 1.00
gamma[2,10]      0.11  3875 1.00
gamma[2,11]      0.39  3354 1.00
gamma[3,1]       1.94  1531 1.00
gamma[3,2]       4.04  1873 1.00
gamma[3,3]       0.49  2245 1.00
gamma[3,4]       0.09  3549 1.00
gamma[3,5]       0.22  3294 1.00
gamma[3,6]       1.01  1310 1.00
gamma[3,7]       1.64  1355 1.00
gamma[3,8]       0.36  2500 1.00
gamma[3,9]       0.18  4432 1.00
gamma[3,10]      0.21  3682 1.00
gamma[3,11]      0.30  3307 1.00
gamma[4,1]       0.61  1480 1.00
gamma[4,2]       0.33  2024 1.00
gamma[4,3]       0.51  1686 1.00
gamma[4,4]       0.18  3462 1.00
gamma[4,5]       0.05  3059 1.00
gamma[4,6]       0.18  1790 1.00
gamma[4,7]       0.27  2603 1.00
gamma[4,8]       0.17  2094 1.00
gamma[4,9]       0.10  3694 1.00
gamma[4,10]      0.16  4373 1.00
gamma[4,11]      0.35  3395 1.00
gamma[5,1]      -0.28  2095 1.00
gamma[5,2]      -0.07  2058 1.00
gamma[5,3]       0.37  3439 1.00
gamma[5,4]       0.17  4447 1.00
gamma[5,5]       0.10  2987 1.00
gamma[5,6]       0.12  1293 1.00
gamma[5,7]       0.34  1318 1.00
gamma[5,8]       0.17  2682 1.00
gamma[5,9]       0.08  4956 1.00
gamma[5,10]      0.17  4958 1.00
gamma[5,11]      0.12  4186 1.00
gamma[6,1]       0.69  1320 1.00
gamma[6,2]       1.09  1814 1.00
gamma[6,3]       0.46  1527 1.00
gamma[6,4]       0.13  2855 1.00
gamma[6,5]       0.32  3088 1.00
gamma[6,6]       0.27  1313 1.00
gamma[6,7]       0.23  1741 1.00
gamma[6,8]       0.32  1730 1.00
gamma[6,9]       0.13  3399 1.00
gamma[6,10]      0.09  3848 1.00
gamma[6,11]      0.24  3266 1.00
sig[1]           0.60  2348 1.00
sig[2]           0.80  1782 1.00
sig[3]           1.06   512 1.01
lp__        -13085.87   544 1.01

Samples were drawn using NUTS(diag_e) at Mon Oct  4 08:00:25 2021.
For each parameter, n_eff is a crude measure of effective sample size,
and Rhat is the potential scale reduction factor on split chains (at 
convergence, Rhat=1).
[1] "./rda/dry_spab_50_model_inter_full_WD_Full_simple.rda"
[1] "MCMC done!!"
