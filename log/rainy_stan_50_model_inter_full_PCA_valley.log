── Attaching packages ─────────────────────────────────────── tidyverse 1.3.1 ──
✔ ggplot2 3.3.3     ✔ purrr   0.3.4
✔ tibble  3.1.2     ✔ dplyr   1.0.6
✔ tidyr   1.1.3     ✔ stringr 1.4.0
✔ readr   1.4.0     ✔ forcats 0.5.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ dplyr::filter() masks stats::filter()
✖ dplyr::lag()    masks stats::lag()
Loading required package: StanHeaders
rstan (Version 2.21.2, GitRev: 2e1f913d3ca3)
For execution on a local, multicore CPU with excess RAM we recommend calling
options(mc.cores = parallel::detectCores()).
To avoid recompilation of unchanged Stan programs, we recommend calling
rstan_options(auto_write = TRUE)

Attaching package: ‘rstan’

The following object is masked from ‘package:tidyr’:

    extract

This is bayesplot version 1.8.0
- Online documentation and vignettes at mc-stan.org/bayesplot
- bayesplot theme set to bayesplot::theme_default()
   * Does _not_ affect other ggplot2 plots
   * See ?bayesplot_theme_set for details on theme setting
[1] "Model  model_inter"
[1] "Model for  rainy season"
[1] "Use full"
[1] "Habitat = valley"
[1] "n_iter = 4000"
[1] "n_warm = 2000"
[1] "n_thin = 1"
[1] "n_chains = 4"
[1] "adapt_delta = 0.95"
[1] "minimum sp abund = 50"

── Column specification ────────────────────────────────────────────────────────
cols(
  qua = col_double(),
  gx = col_double(),
  gy = col_double(),
  plot = col_double(),
  tag = col_character(),
  quadrat = col_character(),
  SPcode = col_character(),
  height = col_double(),
  date = col_character(),
  census = col_character(),
  year = col_double(),
  season = col_character(),
  survive = col_double(),
  CONS = col_double(),
  CONA = col_double(),
  HETA = col_double(),
  HETS = col_double(),
  Rainfall = col_double(),
  habitat = col_character()
)


── Column specification ────────────────────────────────────────────────────────
cols(
  qua = col_double(),
  habit3 = col_character(),
  seedtrap = col_double(),
  habit5 = col_character()
)


── Column specification ────────────────────────────────────────────────────────
cols(
  SPcode = col_character(),
  LDMC = col_double(),
  WD = col_double(),
  SDMC = col_double(),
  LA = col_double(),
  SLA = col_double(),
  Chl = col_double(),
  LT = col_double(),
  C13 = col_double(),
  C = col_double(),
  N = col_double(),
  CN = col_double(),
  tlp = col_double()
)

No. of species
76
[1] "Sp-level: 1 + PC1 + PC2 + PC3"
[1] "sp number in seedling data: 69"
[1] "sp number in trait data: 69"
data{
  int<lower=0> N; // number of sample
  int<lower=1> J; // number of sp
  int<lower=1> K; // number of tree-level preditor (i.e, CONS, HETS,...)
  int<lower=1> L; // number of sp-level predictor (i.e., interecept and WP)
  int<lower=1> M; // number of seedling individuals (tag)
  int<lower=1> S; // number of site
  int<lower=1> T; // number of census
  matrix[N, K] x; // tree-level predictor
  matrix[J, L] u; // sp-level predictor
  int<lower=0,upper=1> suv[N]; // 1 or 0
  int<lower=1,upper=J> sp[N]; // integer
  int<lower=1,upper=S> plot[N]; // integer
  int<lower=1,upper=T> census[N]; // integer
  int<lower=1> tag[N]; // integer
}

parameters{
  matrix[K, J] z;
  vector[S] phi_raw;
  vector[T] xi_raw;
  vector[M] psi_raw;
  matrix[L, K] gamma;
  cholesky_factor_corr[K] L_Omega;
  vector<lower=0,upper=pi()/2>[K] tau_unif;
  vector<lower=0,upper=pi()/2>[3] sig_unif;
}

transformed parameters{
  matrix[J, K] beta;
  vector<lower=0>[K] tau;
  vector<lower=0>[3] sig;
  vector[S] phi;
  vector[T] xi;
  vector[M] psi;
  for (k in 1:K) tau[k] = 2.5 * tan(tau_unif[k]); // implies tau ~ cauchy(0, 2.5)
  for (i in 1:3) sig[i] = 2.5 * tan(sig_unif[i]); // implies sig ~ cauchy(0, 2.5)
  beta = u * gamma + (diag_pre_multiply(tau,L_Omega) * z)';
  phi = phi_raw * sig[1];
  xi = xi_raw * sig[2];
  psi = psi_raw * sig[3];
}

model {
  // Hyper-priors
  to_vector(z) ~ std_normal();
  to_vector(phi_raw) ~ std_normal();
  to_vector(xi_raw) ~ std_normal();
  to_vector(psi_raw) ~ std_normal();
  L_Omega ~ lkj_corr_cholesky(2); // uniform of L_Omega * L_Omega'
  // Priors
  to_vector(gamma) ~ normal(0, 5);
  // Likelihood
  suv ~ bernoulli_logit(rows_dot_product(beta[sp] , x) + phi[plot] + xi[census] + psi[tag]);
}

generated quantities {
  vector[N] log_lik;
  corr_matrix[K] Omega;
  Omega = multiply_lower_tri_self_transpose(L_Omega);
  for (n in 1:N) {
    log_lik[n] = bernoulli_logit_lpmf(suv[n] | dot_product(beta[sp[n],] , x[n,]) + phi[plot[n]] + xi[census[n]] + psi[tag[n]]);
  }
}
[1] "use c = 0.34 as a scaling parameter for the distance effect"
[1] "n_sp = J =69"
[1] "n_para = K = 11"
[1] "n_plot = S = 180"
[1] "n_census = T = 10"
[1] "n_tag = M = 2978"

CHECKING DATA AND PREPROCESSING FOR MODEL 'model_inter' NOW.

COMPILING MODEL 'model_inter' NOW.

STARTING SAMPLER FOR MODEL 'model_inter' NOW.

CHECKING DATA AND PREPROCESSING FOR MODEL 'model_inter' NOW.

CHECKING DATA AND PREPROCESSING FOR MODEL 'model_inter' NOW.

CHECKING DATA AND PREPROCESSING FOR MODEL 'model_inter' NOW.

CHECKING DATA AND PREPROCESSING FOR MODEL 'model_inter' NOW.

COMPILING MODEL 'model_inter' NOW.

STARTING SAMPLER FOR MODEL 'model_inter' NOW.

COMPILING MODEL 'model_inter' NOW.

STARTING SAMPLER FOR MODEL 'model_inter' NOW.

COMPILING MODEL 'model_inter' NOW.

STARTING SAMPLER FOR MODEL 'model_inter' NOW.

SAMPLING FOR MODEL 'model_inter' NOW (CHAIN 3).

COMPILING MODEL 'model_inter' NOW.

STARTING SAMPLER FOR MODEL 'model_inter' NOW.

SAMPLING FOR MODEL 'model_inter' NOW (CHAIN 1).

SAMPLING FOR MODEL 'model_inter' NOW (CHAIN 2).

SAMPLING FOR MODEL 'model_inter' NOW (CHAIN 4).
Chain 3: 
Chain 3: Gradient evaluation took 0.003188 seconds
Chain 3: 1000 transitions using 10 leapfrog steps per transition would take 31.88 seconds.
Chain 3: Adjust your expectations accordingly!
Chain 3: 
Chain 3: 
Chain 2: 
Chain 2: Gradient evaluation took 0.003195 seconds
Chain 2: 1000 transitions using 10 leapfrog steps per transition would take 31.95 seconds.
Chain 2: Adjust your expectations accordingly!
Chain 2: 
Chain 2: 
Chain 1: 
Chain 1: Gradient evaluation took 0.004834 seconds
Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 48.34 seconds.
Chain 1: Adjust your expectations accordingly!
Chain 1: 
Chain 1: 
Chain 3: Iteration:    1 / 4000 [  0%]  (Warmup)
Chain 2: Iteration:    1 / 4000 [  0%]  (Warmup)
Chain 4: 
Chain 4: Gradient evaluation took 0.003752 seconds
Chain 4: 1000 transitions using 10 leapfrog steps per transition would take 37.52 seconds.
Chain 4: Adjust your expectations accordingly!
Chain 4: 
Chain 4: 
Chain 1: Iteration:    1 / 4000 [  0%]  (Warmup)
Chain 4: Iteration:    1 / 4000 [  0%]  (Warmup)
Chain 1: Iteration:  200 / 4000 [  5%]  (Warmup)
Chain 3: Iteration:  200 / 4000 [  5%]  (Warmup)
Chain 4: Iteration:  200 / 4000 [  5%]  (Warmup)
Chain 2: Iteration:  200 / 4000 [  5%]  (Warmup)
Chain 1: Iteration:  400 / 4000 [ 10%]  (Warmup)
Chain 3: Iteration:  400 / 4000 [ 10%]  (Warmup)
Chain 4: Iteration:  400 / 4000 [ 10%]  (Warmup)
Chain 1: Iteration:  600 / 4000 [ 15%]  (Warmup)
Chain 2: Iteration:  400 / 4000 [ 10%]  (Warmup)
Chain 3: Iteration:  600 / 4000 [ 15%]  (Warmup)
Chain 4: Iteration:  600 / 4000 [ 15%]  (Warmup)
Chain 1: Iteration:  800 / 4000 [ 20%]  (Warmup)
Chain 3: Iteration:  800 / 4000 [ 20%]  (Warmup)
Chain 2: Iteration:  600 / 4000 [ 15%]  (Warmup)
Chain 1: Iteration: 1000 / 4000 [ 25%]  (Warmup)
Chain 2: Iteration:  800 / 4000 [ 20%]  (Warmup)
Chain 4: Iteration:  800 / 4000 [ 20%]  (Warmup)
Chain 3: Iteration: 1000 / 4000 [ 25%]  (Warmup)
Chain 1: Iteration: 1200 / 4000 [ 30%]  (Warmup)
Chain 3: Iteration: 1200 / 4000 [ 30%]  (Warmup)
Chain 2: Iteration: 1000 / 4000 [ 25%]  (Warmup)
Chain 4: Iteration: 1000 / 4000 [ 25%]  (Warmup)
Chain 1: Iteration: 1400 / 4000 [ 35%]  (Warmup)
Chain 3: Iteration: 1400 / 4000 [ 35%]  (Warmup)
Chain 2: Iteration: 1200 / 4000 [ 30%]  (Warmup)
Chain 1: Iteration: 1600 / 4000 [ 40%]  (Warmup)
Chain 4: Iteration: 1200 / 4000 [ 30%]  (Warmup)
Chain 3: Iteration: 1600 / 4000 [ 40%]  (Warmup)
Chain 2: Iteration: 1400 / 4000 [ 35%]  (Warmup)
Chain 1: Iteration: 1800 / 4000 [ 45%]  (Warmup)
Chain 3: Iteration: 1800 / 4000 [ 45%]  (Warmup)
Chain 4: Iteration: 1400 / 4000 [ 35%]  (Warmup)
Chain 2: Iteration: 1600 / 4000 [ 40%]  (Warmup)
Chain 4: Iteration: 1600 / 4000 [ 40%]  (Warmup)
Chain 1: Iteration: 2000 / 4000 [ 50%]  (Warmup)
Chain 1: Iteration: 2001 / 4000 [ 50%]  (Sampling)
Chain 3: Iteration: 2000 / 4000 [ 50%]  (Warmup)
Chain 3: Iteration: 2001 / 4000 [ 50%]  (Sampling)
Chain 2: Iteration: 1800 / 4000 [ 45%]  (Warmup)
Chain 1: Iteration: 2200 / 4000 [ 55%]  (Sampling)
Chain 4: Iteration: 1800 / 4000 [ 45%]  (Warmup)
Chain 3: Iteration: 2200 / 4000 [ 55%]  (Sampling)
Chain 1: Iteration: 2400 / 4000 [ 60%]  (Sampling)
Chain 2: Iteration: 2000 / 4000 [ 50%]  (Warmup)
Chain 2: Iteration: 2001 / 4000 [ 50%]  (Sampling)
Chain 4: Iteration: 2000 / 4000 [ 50%]  (Warmup)
Chain 4: Iteration: 2001 / 4000 [ 50%]  (Sampling)
Chain 1: Iteration: 2600 / 4000 [ 65%]  (Sampling)
Chain 2: Iteration: 2200 / 4000 [ 55%]  (Sampling)
Chain 3: Iteration: 2400 / 4000 [ 60%]  (Sampling)
Chain 1: Iteration: 2800 / 4000 [ 70%]  (Sampling)
Chain 2: Iteration: 2400 / 4000 [ 60%]  (Sampling)
Chain 4: Iteration: 2200 / 4000 [ 55%]  (Sampling)
Chain 2: Iteration: 2600 / 4000 [ 65%]  (Sampling)
Chain 1: Iteration: 3000 / 4000 [ 75%]  (Sampling)
Chain 2: Iteration: 2800 / 4000 [ 70%]  (Sampling)
Chain 3: Iteration: 2600 / 4000 [ 65%]  (Sampling)
Chain 1: Iteration: 3200 / 4000 [ 80%]  (Sampling)
Chain 4: Iteration: 2400 / 4000 [ 60%]  (Sampling)
Chain 2: Iteration: 3000 / 4000 [ 75%]  (Sampling)
Chain 1: Iteration: 3400 / 4000 [ 85%]  (Sampling)
Chain 2: Iteration: 3200 / 4000 [ 80%]  (Sampling)
Chain 1: Iteration: 3600 / 4000 [ 90%]  (Sampling)
Chain 3: Iteration: 2800 / 4000 [ 70%]  (Sampling)
Chain 4: Iteration: 2600 / 4000 [ 65%]  (Sampling)
Chain 1: Iteration: 3800 / 4000 [ 95%]  (Sampling)
Chain 2: Iteration: 3400 / 4000 [ 85%]  (Sampling)
Chain 4: Iteration: 2800 / 4000 [ 70%]  (Sampling)
Chain 2: Iteration: 3600 / 4000 [ 90%]  (Sampling)
Chain 3: Iteration: 3000 / 4000 [ 75%]  (Sampling)
Chain 1: Iteration: 4000 / 4000 [100%]  (Sampling)
Chain 1: 
Chain 1:  Elapsed Time: 8175.85 seconds (Warm-up)
Chain 1:                5817.86 seconds (Sampling)
Chain 1:                13993.7 seconds (Total)
Chain 1: 
Chain 2: Iteration: 3800 / 4000 [ 95%]  (Sampling)
Chain 2: Iteration: 4000 / 4000 [100%]  (Sampling)
Chain 2: 
Chain 2:  Elapsed Time: 9542.28 seconds (Warm-up)
Chain 2:                5202.12 seconds (Sampling)
Chain 2:                14744.4 seconds (Total)
Chain 2: 
Chain 3: Iteration: 3200 / 4000 [ 80%]  (Sampling)
Chain 4: Iteration: 3000 / 4000 [ 75%]  (Sampling)
Chain 3: Iteration: 3400 / 4000 [ 85%]  (Sampling)
Chain 4: Iteration: 3200 / 4000 [ 80%]  (Sampling)
Chain 4: Iteration: 3400 / 4000 [ 85%]  (Sampling)
Chain 3: Iteration: 3600 / 4000 [ 90%]  (Sampling)
Chain 4: Iteration: 3600 / 4000 [ 90%]  (Sampling)
Chain 3: Iteration: 3800 / 4000 [ 95%]  (Sampling)
Chain 4: Iteration: 3800 / 4000 [ 95%]  (Sampling)
Chain 3: Iteration: 4000 / 4000 [100%]  (Sampling)
Chain 3: 
Chain 3:  Elapsed Time: 8182.01 seconds (Warm-up)
Chain 3:                9689.77 seconds (Sampling)
Chain 3:                17871.8 seconds (Total)
Chain 3: 
Chain 4: Iteration: 4000 / 4000 [100%]  (Sampling)
Chain 4: 
Chain 4:  Elapsed Time: 9895.15 seconds (Warm-up)
Chain 4:                8268 seconds (Sampling)
Chain 4:                18163.2 seconds (Total)
Chain 4: 
Inference for Stan model: model_inter.
4 chains, each with iter=4000; warmup=2000; thin=1; 
post-warmup draws per chain=2000, total post-warmup draws=8000.

                mean se_mean     sd     2.5%      25%      50%      75%
gamma[1,1]      3.17    0.02   0.75     1.76     2.66     3.14     3.65
gamma[1,2]     -0.84    0.03   1.20    -3.16    -1.65    -0.83    -0.03
gamma[1,3]     -0.72    0.01   0.42    -1.57    -0.99    -0.70    -0.43
gamma[1,4]      0.41    0.00   0.18     0.08     0.29     0.41     0.53
gamma[1,5]     -0.07    0.00   0.17    -0.43    -0.18    -0.06     0.05
gamma[1,6]      0.51    0.01   0.56    -0.56     0.14     0.51     0.88
gamma[1,7]      0.39    0.01   0.88    -1.32    -0.20     0.39     0.97
gamma[1,8]      0.14    0.00   0.21    -0.28     0.01     0.14     0.28
gamma[1,9]     -0.08    0.00   0.15    -0.38    -0.18    -0.09     0.01
gamma[1,10]     0.10    0.00   0.11    -0.12     0.03     0.10     0.17
gamma[1,11]     1.99    0.01   0.24     1.55     1.83     1.99     2.15
gamma[2,1]      0.02    0.01   0.39    -0.75    -0.23     0.02     0.28
gamma[2,2]      0.12    0.01   0.65    -1.17    -0.31     0.12     0.55
gamma[2,3]     -0.19    0.00   0.24    -0.65    -0.35    -0.19    -0.03
gamma[2,4]      0.01    0.00   0.11    -0.20    -0.06     0.01     0.08
gamma[2,5]      0.17    0.00   0.09     0.00     0.11     0.17     0.23
gamma[2,6]      0.72    0.00   0.29     0.15     0.52     0.71     0.91
gamma[2,7]      1.28    0.01   0.55     0.22     0.91     1.27     1.64
gamma[2,8]      0.12    0.00   0.14    -0.16     0.02     0.11     0.21
gamma[2,9]      0.03    0.00   0.09    -0.15    -0.03     0.03     0.09
gamma[2,10]    -0.07    0.00   0.06    -0.20    -0.11    -0.07    -0.03
gamma[2,11]    -0.16    0.00   0.11    -0.37    -0.24    -0.17    -0.09
gamma[3,1]     -0.15    0.01   0.27    -0.69    -0.33    -0.15     0.03
gamma[3,2]     -0.50    0.01   0.42    -1.31    -0.77    -0.51    -0.23
gamma[3,3]      0.13    0.00   0.22    -0.31    -0.02     0.12     0.27
gamma[3,4]      0.02    0.00   0.08    -0.12    -0.03     0.02     0.07
gamma[3,5]     -0.06    0.00   0.08    -0.22    -0.11    -0.06    -0.01
gamma[3,6]     -0.27    0.00   0.16    -0.59    -0.37    -0.27    -0.16
gamma[3,7]     -0.42    0.01   0.31    -1.03    -0.63    -0.42    -0.22
gamma[3,8]     -0.06    0.00   0.11    -0.29    -0.14    -0.06     0.01
gamma[3,9]      0.07    0.00   0.07    -0.07     0.02     0.07     0.12
gamma[3,10]     0.08    0.00   0.05    -0.02     0.04     0.08     0.12
gamma[3,11]     0.08    0.00   0.11    -0.15     0.01     0.08     0.16
gamma[4,1]     -0.75    0.01   0.33    -1.40    -0.96    -0.75    -0.53
gamma[4,2]     -0.10    0.01   0.42    -1.02    -0.34    -0.08     0.16
gamma[4,3]     -0.47    0.00   0.29    -1.06    -0.65    -0.46    -0.28
gamma[4,4]      0.03    0.00   0.11    -0.19    -0.04     0.03     0.10
gamma[4,5]     -0.13    0.00   0.12    -0.38    -0.21    -0.12    -0.05
gamma[4,6]     -0.34    0.00   0.19    -0.73    -0.46    -0.34    -0.22
gamma[4,7]     -0.72    0.00   0.28    -1.28    -0.90    -0.71    -0.53
gamma[4,8]     -0.22    0.00   0.15    -0.53    -0.32    -0.22    -0.12
gamma[4,9]      0.03    0.00   0.11    -0.18    -0.04     0.03     0.10
gamma[4,10]    -0.01    0.00   0.08    -0.17    -0.06    -0.01     0.04
gamma[4,11]     0.21    0.00   0.17    -0.12     0.10     0.21     0.32
sig[1]          0.80    0.00   0.12     0.59     0.72     0.80     0.88
sig[2]          0.98    0.01   0.34     0.50     0.75     0.92     1.14
sig[3]          1.94    0.01   0.28     1.45     1.75     1.92     2.11
lp__        -4102.18    5.90 120.52 -4325.29 -4184.27 -4107.04 -4023.23
               97.5% n_eff Rhat
gamma[1,1]      4.71  2093 1.00
gamma[1,2]      1.50  2279 1.00
gamma[1,3]      0.05  2618 1.00
gamma[1,4]      0.78  4757 1.00
gamma[1,5]      0.26  4432 1.00
gamma[1,6]      1.62  3051 1.00
gamma[1,7]      2.12  3514 1.00
gamma[1,8]      0.54  6217 1.00
gamma[1,9]      0.22  5942 1.00
gamma[1,10]     0.31  6139 1.00
gamma[1,11]     2.50  1468 1.00
gamma[2,1]      0.80  2961 1.00
gamma[2,2]      1.37  2921 1.00
gamma[2,3]      0.28  4683 1.00
gamma[2,4]      0.23  6494 1.00
gamma[2,5]      0.36  4330 1.00
gamma[2,6]      1.31  3851 1.00
gamma[2,7]      2.37  3879 1.00
gamma[2,8]      0.39  7305 1.00
gamma[2,9]      0.20  6474 1.00
gamma[2,10]     0.06  8502 1.00
gamma[2,11]     0.06  6060 1.00
gamma[3,1]      0.36  2821 1.00
gamma[3,2]      0.40  2698 1.00
gamma[3,3]      0.58  3527 1.00
gamma[3,4]      0.18  5192 1.00
gamma[3,5]      0.09  4911 1.00
gamma[3,6]      0.04  3372 1.00
gamma[3,7]      0.19  3685 1.00
gamma[3,8]      0.16  4460 1.00
gamma[3,9]      0.22  5553 1.00
gamma[3,10]     0.18  7421 1.00
gamma[3,11]     0.31  5955 1.00
gamma[4,1]     -0.11  2298 1.00
gamma[4,2]      0.69  3154 1.00
gamma[4,3]      0.07  3341 1.00
gamma[4,4]      0.23  5499 1.00
gamma[4,5]      0.10  3909 1.00
gamma[4,6]      0.01  3607 1.00
gamma[4,7]     -0.15  4272 1.00
gamma[4,8]      0.06  4743 1.00
gamma[4,9]      0.23  5485 1.00
gamma[4,10]     0.15  6586 1.00
gamma[4,11]     0.54  6799 1.00
sig[1]          1.06   930 1.00
sig[2]          1.79  1305 1.00
sig[3]          2.56   420 1.01
lp__        -3849.19   417 1.01

Samples were drawn using NUTS(diag_e) at Tue Aug 24 23:32:01 2021.
For each parameter, n_eff is a crude measure of effective sample size,
and Rhat is the potential scale reduction factor on split chains (at 
convergence, Rhat=1).
[1] "./rda/rainy_spab_50_model_inter_full_PCA_valley.rda"
[1] "MCMC done!!"
