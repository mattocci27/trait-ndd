── Attaching packages ─────────────────────────────────────── tidyverse 1.3.1 ──
✔ ggplot2 3.3.3     ✔ purrr   0.3.4
✔ tibble  3.1.2     ✔ dplyr   1.0.6
✔ tidyr   1.1.3     ✔ stringr 1.4.0
✔ readr   1.4.0     ✔ forcats 0.5.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ dplyr::filter() masks stats::filter()
✖ dplyr::lag()    masks stats::lag()
Loading required package: StanHeaders
rstan (Version 2.21.2, GitRev: 2e1f913d3ca3)
For execution on a local, multicore CPU with excess RAM we recommend calling
options(mc.cores = parallel::detectCores()).
To avoid recompilation of unchanged Stan programs, we recommend calling
rstan_options(auto_write = TRUE)

Attaching package: ‘rstan’

The following object is masked from ‘package:tidyr’:

    extract

This is bayesplot version 1.8.0
- Online documentation and vignettes at mc-stan.org/bayesplot
- bayesplot theme set to bayesplot::theme_default()
   * Does _not_ affect other ggplot2 plots
   * See ?bayesplot_theme_set for details on theme setting
[1] "Model  model_inter"
[1] "Model for  rainy season"
[1] "Use full"
[1] "Habitat = slope"
[1] "n_iter = 4000"
[1] "n_warm = 2000"
[1] "n_thin = 1"
[1] "n_chains = 4"
[1] "adapt_delta = 0.95"
[1] "minimum sp abund = 50"

── Column specification ────────────────────────────────────────────────────────
cols(
  qua = col_double(),
  gx = col_double(),
  gy = col_double(),
  plot = col_double(),
  tag = col_character(),
  quadrat = col_character(),
  SPcode = col_character(),
  height = col_double(),
  date = col_character(),
  census = col_character(),
  year = col_double(),
  season = col_character(),
  survive = col_double(),
  CONS = col_double(),
  CONA = col_double(),
  HETA = col_double(),
  HETS = col_double(),
  Rainfall = col_double(),
  habitat = col_character()
)


── Column specification ────────────────────────────────────────────────────────
cols(
  qua = col_double(),
  habit3 = col_character(),
  seedtrap = col_double(),
  habit5 = col_character()
)


── Column specification ────────────────────────────────────────────────────────
cols(
  SPcode = col_character(),
  LDMC = col_double(),
  WD = col_double(),
  SDMC = col_double(),
  LA = col_double(),
  SLA = col_double(),
  Chl = col_double(),
  LT = col_double(),
  C13 = col_double(),
  C = col_double(),
  N = col_double(),
  CN = col_double(),
  tlp = col_double()
)

No. of species
76
[1] "Sp-level: 1 + PC1 + PC2 + PC3"
[1] "sp number in seedling data: 68"
[1] "sp number in trait data: 68"
data{
  int<lower=0> N; // number of sample
  int<lower=1> J; // number of sp
  int<lower=1> K; // number of tree-level preditor (i.e, CONS, HETS,...)
  int<lower=1> L; // number of sp-level predictor (i.e., interecept and WP)
  int<lower=1> M; // number of seedling individuals (tag)
  int<lower=1> S; // number of site
  int<lower=1> T; // number of census
  matrix[N, K] x; // tree-level predictor
  matrix[J, L] u; // sp-level predictor
  int<lower=0,upper=1> suv[N]; // 1 or 0
  int<lower=1,upper=J> sp[N]; // integer
  int<lower=1,upper=S> plot[N]; // integer
  int<lower=1,upper=T> census[N]; // integer
  int<lower=1> tag[N]; // integer
}

parameters{
  matrix[K, J] z;
  vector[S] phi_raw;
  vector[T] xi_raw;
  vector[M] psi_raw;
  matrix[L, K] gamma;
  cholesky_factor_corr[K] L_Omega;
  vector<lower=0,upper=pi()/2>[K] tau_unif;
  vector<lower=0,upper=pi()/2>[3] sig_unif;
}

transformed parameters{
  matrix[J, K] beta;
  vector<lower=0>[K] tau;
  vector<lower=0>[3] sig;
  vector[S] phi;
  vector[T] xi;
  vector[M] psi;
  for (k in 1:K) tau[k] = 2.5 * tan(tau_unif[k]); // implies tau ~ cauchy(0, 2.5)
  for (i in 1:3) sig[i] = 2.5 * tan(sig_unif[i]); // implies sig ~ cauchy(0, 2.5)
  beta = u * gamma + (diag_pre_multiply(tau,L_Omega) * z)';
  phi = phi_raw * sig[1];
  xi = xi_raw * sig[2];
  psi = psi_raw * sig[3];
}

model {
  // Hyper-priors
  to_vector(z) ~ std_normal();
  to_vector(phi_raw) ~ std_normal();
  to_vector(xi_raw) ~ std_normal();
  to_vector(psi_raw) ~ std_normal();
  L_Omega ~ lkj_corr_cholesky(2); // uniform of L_Omega * L_Omega'
  // Priors
  to_vector(gamma) ~ normal(0, 5);
  // Likelihood
  suv ~ bernoulli_logit(rows_dot_product(beta[sp] , x) + phi[plot] + xi[census] + psi[tag]);
}

generated quantities {
  vector[N] log_lik;
  corr_matrix[K] Omega;
  Omega = multiply_lower_tri_self_transpose(L_Omega);
  for (n in 1:N) {
    log_lik[n] = bernoulli_logit_lpmf(suv[n] | dot_product(beta[sp[n],] , x[n,]) + phi[plot[n]] + xi[census[n]] + psi[tag[n]]);
  }
}
[1] "use c = 0.3 as a scaling parameter for the distance effect"
[1] "n_sp = J =68"
[1] "n_para = K = 11"
[1] "n_plot = S = 93"
[1] "n_census = T = 10"
[1] "n_tag = M = 1915"

CHECKING DATA AND PREPROCESSING FOR MODEL 'model_inter' NOW.

COMPILING MODEL 'model_inter' NOW.

STARTING SAMPLER FOR MODEL 'model_inter' NOW.

CHECKING DATA AND PREPROCESSING FOR MODEL 'model_inter' NOW.

CHECKING DATA AND PREPROCESSING FOR MODEL 'model_inter' NOW.

CHECKING DATA AND PREPROCESSING FOR MODEL 'model_inter' NOW.

COMPILING MODEL 'model_inter' NOW.

STARTING SAMPLER FOR MODEL 'model_inter' NOW.

CHECKING DATA AND PREPROCESSING FOR MODEL 'model_inter' NOW.

COMPILING MODEL 'model_inter' NOW.

STARTING SAMPLER FOR MODEL 'model_inter' NOW.

COMPILING MODEL 'model_inter' NOW.

STARTING SAMPLER FOR MODEL 'model_inter' NOW.

SAMPLING FOR MODEL 'model_inter' NOW (CHAIN 1).

COMPILING MODEL 'model_inter' NOW.

STARTING SAMPLER FOR MODEL 'model_inter' NOW.

SAMPLING FOR MODEL 'model_inter' NOW (CHAIN 2).

SAMPLING FOR MODEL 'model_inter' NOW (CHAIN 3).

SAMPLING FOR MODEL 'model_inter' NOW (CHAIN 4).
Chain 1: 
Chain 1: Gradient evaluation took 0.008334 seconds
Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 83.34 seconds.
Chain 1: Adjust your expectations accordingly!
Chain 1: 
Chain 1: 
Chain 4: 
Chain 4: Gradient evaluation took 0.007895 seconds
Chain 4: 1000 transitions using 10 leapfrog steps per transition would take 78.95 seconds.
Chain 4: Adjust your expectations accordingly!
Chain 4: 
Chain 4: 
Chain 3: 
Chain 3: Gradient evaluation took 0.009702 seconds
Chain 3: 1000 transitions using 10 leapfrog steps per transition would take 97.02 seconds.
Chain 3: Adjust your expectations accordingly!
Chain 3: 
Chain 3: 
Chain 1: Iteration:    1 / 4000 [  0%]  (Warmup)
Chain 4: Iteration:    1 / 4000 [  0%]  (Warmup)
Chain 2: 
Chain 2: Gradient evaluation took 0.009582 seconds
Chain 2: 1000 transitions using 10 leapfrog steps per transition would take 95.82 seconds.
Chain 2: Adjust your expectations accordingly!
Chain 2: 
Chain 2: 
Chain 3: Iteration:    1 / 4000 [  0%]  (Warmup)
Chain 2: Iteration:    1 / 4000 [  0%]  (Warmup)
Chain 3: Iteration:  200 / 4000 [  5%]  (Warmup)
Chain 1: Iteration:  200 / 4000 [  5%]  (Warmup)
Chain 2: Iteration:  200 / 4000 [  5%]  (Warmup)
Chain 4: Iteration:  200 / 4000 [  5%]  (Warmup)
Chain 3: Iteration:  400 / 4000 [ 10%]  (Warmup)
Chain 1: Iteration:  400 / 4000 [ 10%]  (Warmup)
Chain 2: Iteration:  400 / 4000 [ 10%]  (Warmup)
Chain 4: Iteration:  400 / 4000 [ 10%]  (Warmup)
Chain 3: Iteration:  600 / 4000 [ 15%]  (Warmup)
Chain 1: Iteration:  600 / 4000 [ 15%]  (Warmup)
Chain 2: Iteration:  600 / 4000 [ 15%]  (Warmup)
Chain 4: Iteration:  600 / 4000 [ 15%]  (Warmup)
Chain 3: Iteration:  800 / 4000 [ 20%]  (Warmup)
Chain 1: Iteration:  800 / 4000 [ 20%]  (Warmup)
Chain 4: Iteration:  800 / 4000 [ 20%]  (Warmup)
Chain 2: Iteration:  800 / 4000 [ 20%]  (Warmup)
Chain 3: Iteration: 1000 / 4000 [ 25%]  (Warmup)
Chain 1: Iteration: 1000 / 4000 [ 25%]  (Warmup)
Chain 4: Iteration: 1000 / 4000 [ 25%]  (Warmup)
Chain 2: Iteration: 1000 / 4000 [ 25%]  (Warmup)
Chain 3: Iteration: 1200 / 4000 [ 30%]  (Warmup)
Chain 1: Iteration: 1200 / 4000 [ 30%]  (Warmup)
Chain 4: Iteration: 1200 / 4000 [ 30%]  (Warmup)
Chain 2: Iteration: 1200 / 4000 [ 30%]  (Warmup)
Chain 3: Iteration: 1400 / 4000 [ 35%]  (Warmup)
Chain 1: Iteration: 1400 / 4000 [ 35%]  (Warmup)
Chain 4: Iteration: 1400 / 4000 [ 35%]  (Warmup)
Chain 2: Iteration: 1400 / 4000 [ 35%]  (Warmup)
Chain 3: Iteration: 1600 / 4000 [ 40%]  (Warmup)
Chain 1: Iteration: 1600 / 4000 [ 40%]  (Warmup)
Chain 4: Iteration: 1600 / 4000 [ 40%]  (Warmup)
Chain 3: Iteration: 1800 / 4000 [ 45%]  (Warmup)
Chain 2: Iteration: 1600 / 4000 [ 40%]  (Warmup)
Chain 1: Iteration: 1800 / 4000 [ 45%]  (Warmup)
Chain 4: Iteration: 1800 / 4000 [ 45%]  (Warmup)
Chain 3: Iteration: 2000 / 4000 [ 50%]  (Warmup)
Chain 3: Iteration: 2001 / 4000 [ 50%]  (Sampling)
Chain 2: Iteration: 1800 / 4000 [ 45%]  (Warmup)
Chain 1: Iteration: 2000 / 4000 [ 50%]  (Warmup)
Chain 1: Iteration: 2001 / 4000 [ 50%]  (Sampling)
Chain 4: Iteration: 2000 / 4000 [ 50%]  (Warmup)
Chain 4: Iteration: 2001 / 4000 [ 50%]  (Sampling)
Chain 3: Iteration: 2200 / 4000 [ 55%]  (Sampling)
Chain 2: Iteration: 2000 / 4000 [ 50%]  (Warmup)
Chain 2: Iteration: 2001 / 4000 [ 50%]  (Sampling)
Chain 1: Iteration: 2200 / 4000 [ 55%]  (Sampling)
Chain 3: Iteration: 2400 / 4000 [ 60%]  (Sampling)
Chain 4: Iteration: 2200 / 4000 [ 55%]  (Sampling)
Chain 2: Iteration: 2200 / 4000 [ 55%]  (Sampling)
Chain 1: Iteration: 2400 / 4000 [ 60%]  (Sampling)
Chain 3: Iteration: 2600 / 4000 [ 65%]  (Sampling)
Chain 4: Iteration: 2400 / 4000 [ 60%]  (Sampling)
Chain 2: Iteration: 2400 / 4000 [ 60%]  (Sampling)
Chain 1: Iteration: 2600 / 4000 [ 65%]  (Sampling)
Chain 3: Iteration: 2800 / 4000 [ 70%]  (Sampling)
Chain 4: Iteration: 2600 / 4000 [ 65%]  (Sampling)
Chain 2: Iteration: 2600 / 4000 [ 65%]  (Sampling)
Chain 1: Iteration: 2800 / 4000 [ 70%]  (Sampling)
Chain 3: Iteration: 3000 / 4000 [ 75%]  (Sampling)
Chain 4: Iteration: 2800 / 4000 [ 70%]  (Sampling)
Chain 2: Iteration: 2800 / 4000 [ 70%]  (Sampling)
Chain 1: Iteration: 3000 / 4000 [ 75%]  (Sampling)
Chain 3: Iteration: 3200 / 4000 [ 80%]  (Sampling)
Chain 4: Iteration: 3000 / 4000 [ 75%]  (Sampling)
Chain 2: Iteration: 3000 / 4000 [ 75%]  (Sampling)
Chain 1: Iteration: 3200 / 4000 [ 80%]  (Sampling)
Chain 3: Iteration: 3400 / 4000 [ 85%]  (Sampling)
Chain 4: Iteration: 3200 / 4000 [ 80%]  (Sampling)
Chain 2: Iteration: 3200 / 4000 [ 80%]  (Sampling)
Chain 1: Iteration: 3400 / 4000 [ 85%]  (Sampling)
Chain 3: Iteration: 3600 / 4000 [ 90%]  (Sampling)
Chain 4: Iteration: 3400 / 4000 [ 85%]  (Sampling)
Chain 2: Iteration: 3400 / 4000 [ 85%]  (Sampling)
Chain 1: Iteration: 3600 / 4000 [ 90%]  (Sampling)
Chain 3: Iteration: 3800 / 4000 [ 95%]  (Sampling)
Chain 4: Iteration: 3600 / 4000 [ 90%]  (Sampling)
Chain 2: Iteration: 3600 / 4000 [ 90%]  (Sampling)
Chain 1: Iteration: 3800 / 4000 [ 95%]  (Sampling)
Chain 3: Iteration: 4000 / 4000 [100%]  (Sampling)
Chain 3: 
Chain 3:  Elapsed Time: 5744.53 seconds (Warm-up)
Chain 3:                5236.84 seconds (Sampling)
Chain 3:                10981.4 seconds (Total)
Chain 3: 
Chain 4: Iteration: 3800 / 4000 [ 95%]  (Sampling)
Chain 2: Iteration: 3800 / 4000 [ 95%]  (Sampling)
Chain 1: Iteration: 4000 / 4000 [100%]  (Sampling)
Chain 1: 
Chain 1:  Elapsed Time: 5992.86 seconds (Warm-up)
Chain 1:                5411.9 seconds (Sampling)
Chain 1:                11404.8 seconds (Total)
Chain 1: 
Chain 4: Iteration: 4000 / 4000 [100%]  (Sampling)
Chain 4: 
Chain 4:  Elapsed Time: 6248.81 seconds (Warm-up)
Chain 4:                5543.21 seconds (Sampling)
Chain 4:                11792 seconds (Total)
Chain 4: 
Chain 2: Iteration: 4000 / 4000 [100%]  (Sampling)
Chain 2: 
Chain 2:  Elapsed Time: 6290.17 seconds (Warm-up)
Chain 2:                5557.13 seconds (Sampling)
Chain 2:                11847.3 seconds (Total)
Chain 2: 
Inference for Stan model: model_inter.
4 chains, each with iter=4000; warmup=2000; thin=1; 
post-warmup draws per chain=2000, total post-warmup draws=8000.

                mean se_mean    sd     2.5%      25%      50%      75%    97.5%
gamma[1,1]      2.79    0.01  0.49     1.88     2.46     2.78     3.11     3.81
gamma[1,2]     -0.91    0.02  0.89    -2.69    -1.47    -0.88    -0.31     0.80
gamma[1,3]     -0.64    0.00  0.25    -1.12    -0.81    -0.64    -0.48    -0.15
gamma[1,4]      0.35    0.00  0.16     0.07     0.24     0.34     0.45     0.69
gamma[1,5]      0.37    0.00  0.21    -0.02     0.22     0.36     0.50     0.81
gamma[1,6]      0.28    0.01  0.34    -0.38     0.06     0.27     0.49     0.95
gamma[1,7]      0.93    0.01  0.66    -0.29     0.47     0.89     1.36     2.30
gamma[1,8]     -0.27    0.00  0.19    -0.66    -0.40    -0.27    -0.15     0.07
gamma[1,9]     -0.04    0.00  0.10    -0.24    -0.11    -0.04     0.03     0.16
gamma[1,10]     0.07    0.00  0.13    -0.17    -0.01     0.07     0.15     0.32
gamma[1,11]     1.10    0.00  0.17     0.78     0.98     1.09     1.21     1.43
gamma[2,1]     -0.41    0.01  0.25    -0.91    -0.58    -0.41    -0.25     0.08
gamma[2,2]     -0.73    0.01  0.49    -1.70    -1.06    -0.73    -0.41     0.23
gamma[2,3]     -0.17    0.00  0.12    -0.41    -0.24    -0.16    -0.09     0.07
gamma[2,4]      0.06    0.00  0.07    -0.08     0.01     0.06     0.10     0.21
gamma[2,5]      0.02    0.00  0.10    -0.20    -0.05     0.02     0.09     0.21
gamma[2,6]      0.17    0.00  0.18    -0.16     0.05     0.17     0.29     0.54
gamma[2,7]      0.59    0.01  0.36    -0.09     0.34     0.58     0.83     1.31
gamma[2,8]     -0.12    0.00  0.09    -0.31    -0.18    -0.12    -0.06     0.05
gamma[2,9]     -0.03    0.00  0.05    -0.13    -0.06    -0.03     0.00     0.07
gamma[2,10]     0.10    0.00  0.06    -0.02     0.05     0.09     0.14     0.22
gamma[2,11]    -0.04    0.00  0.08    -0.20    -0.10    -0.04     0.01     0.12
gamma[3,1]     -0.17    0.00  0.25    -0.66    -0.33    -0.16     0.00     0.32
gamma[3,2]     -0.26    0.01  0.50    -1.22    -0.59    -0.26     0.06     0.74
gamma[3,3]     -0.13    0.00  0.12    -0.39    -0.20    -0.12    -0.04     0.10
gamma[3,4]      0.01    0.00  0.07    -0.13    -0.04     0.01     0.06     0.15
gamma[3,5]      0.05    0.00  0.11    -0.16    -0.03     0.04     0.12     0.30
gamma[3,6]      0.11    0.00  0.17    -0.20     0.00     0.11     0.22     0.45
gamma[3,7]      0.27    0.01  0.36    -0.42     0.04     0.27     0.51     0.98
gamma[3,8]     -0.03    0.00  0.08    -0.20    -0.09    -0.03     0.02     0.13
gamma[3,9]      0.01    0.00  0.05    -0.09    -0.02     0.01     0.04     0.12
gamma[3,10]    -0.05    0.00  0.06    -0.17    -0.09    -0.05    -0.01     0.08
gamma[3,11]    -0.07    0.00  0.09    -0.25    -0.14    -0.08    -0.01     0.11
gamma[4,1]     -0.79    0.01  0.32    -1.43    -1.00    -0.78    -0.57    -0.17
gamma[4,2]     -0.51    0.01  0.62    -1.73    -0.91    -0.50    -0.09     0.71
gamma[4,3]     -0.14    0.00  0.17    -0.49    -0.25    -0.14    -0.03     0.18
gamma[4,4]     -0.05    0.00  0.11    -0.26    -0.13    -0.05     0.02     0.17
gamma[4,5]      0.02    0.00  0.16    -0.30    -0.08     0.02     0.12     0.31
gamma[4,6]      0.05    0.00  0.22    -0.36    -0.10     0.04     0.20     0.50
gamma[4,7]      0.07    0.01  0.48    -0.90    -0.25     0.07     0.39     1.02
gamma[4,8]      0.23    0.00  0.13    -0.02     0.15     0.23     0.32     0.48
gamma[4,9]      0.06    0.00  0.08    -0.10     0.01     0.06     0.12     0.23
gamma[4,10]     0.03    0.00  0.10    -0.16    -0.03     0.03     0.09     0.21
gamma[4,11]    -0.09    0.00  0.13    -0.33    -0.17    -0.09    -0.01     0.17
sig[1]          0.50    0.00  0.14     0.22     0.41     0.50     0.59     0.79
sig[2]          0.51    0.01  0.20     0.24     0.37     0.47     0.60     1.00
sig[3]          1.44    0.01  0.26     0.95     1.27     1.43     1.61     1.98
lp__        -3075.40    3.96 86.72 -3245.41 -3132.48 -3075.40 -3018.25 -2905.12
            n_eff Rhat
gamma[1,1]   2109 1.00
gamma[1,2]   3088 1.00
gamma[1,3]   4156 1.00
gamma[1,4]   4204 1.00
gamma[1,5]   3992 1.00
gamma[1,6]   4137 1.00
gamma[1,7]   3894 1.00
gamma[1,8]   4627 1.00
gamma[1,9]   8789 1.00
gamma[1,10]  8397 1.00
gamma[1,11]  4225 1.00
gamma[2,1]   2514 1.00
gamma[2,2]   2883 1.00
gamma[2,3]   5183 1.00
gamma[2,4]   7176 1.00
gamma[2,5]   4990 1.00
gamma[2,6]   3265 1.00
gamma[2,7]   3195 1.00
gamma[2,8]   5604 1.00
gamma[2,9]   7252 1.00
gamma[2,10]  6740 1.00
gamma[2,11]  7644 1.00
gamma[3,1]   3233 1.00
gamma[3,2]   3120 1.00
gamma[3,3]   4587 1.00
gamma[3,4]   7788 1.00
gamma[3,5]   4683 1.00
gamma[3,6]   2787 1.00
gamma[3,7]   3102 1.00
gamma[3,8]   7023 1.00
gamma[3,9]   9716 1.00
gamma[3,10]  8618 1.00
gamma[3,11]  6723 1.00
gamma[4,1]   3057 1.00
gamma[4,2]   3321 1.00
gamma[4,3]   5526 1.00
gamma[4,4]   6376 1.00
gamma[4,5]   5631 1.00
gamma[4,6]   2922 1.00
gamma[4,7]   3277 1.00
gamma[4,8]   7005 1.00
gamma[4,9]   8361 1.00
gamma[4,10]  7194 1.00
gamma[4,11]  6771 1.00
sig[1]       1339 1.00
sig[2]       1600 1.00
sig[3]        484 1.01
lp__          481 1.00

Samples were drawn using NUTS(diag_e) at Tue Aug 24 21:46:43 2021.
For each parameter, n_eff is a crude measure of effective sample size,
and Rhat is the potential scale reduction factor on split chains (at 
convergence, Rhat=1).
[1] "./rda/rainy_spab_50_model_inter_full_PCA_slope.rda"
[1] "MCMC done!!"
