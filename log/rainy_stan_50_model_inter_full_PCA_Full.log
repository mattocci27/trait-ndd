── Attaching packages ─────────────────────────────────────── tidyverse 1.3.1 ──
✔ ggplot2 3.3.3     ✔ purrr   0.3.4
✔ tibble  3.1.2     ✔ dplyr   1.0.6
✔ tidyr   1.1.3     ✔ stringr 1.4.0
✔ readr   1.4.0     ✔ forcats 0.5.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ dplyr::filter() masks stats::filter()
✖ dplyr::lag()    masks stats::lag()
Loading required package: StanHeaders
rstan (Version 2.21.2, GitRev: 2e1f913d3ca3)
For execution on a local, multicore CPU with excess RAM we recommend calling
options(mc.cores = parallel::detectCores()).
To avoid recompilation of unchanged Stan programs, we recommend calling
rstan_options(auto_write = TRUE)

Attaching package: ‘rstan’

The following object is masked from ‘package:tidyr’:

    extract

This is bayesplot version 1.8.0
- Online documentation and vignettes at mc-stan.org/bayesplot
- bayesplot theme set to bayesplot::theme_default()
   * Does _not_ affect other ggplot2 plots
   * See ?bayesplot_theme_set for details on theme setting
[1] "Model  model_inter"
[1] "Model for  rainy season"
[1] "Use full"
[1] "Habitat = Full"
[1] "n_iter = 4000"
[1] "n_warm = 2000"
[1] "n_thin = 1"
[1] "n_chains = 4"
[1] "adapt_delta = 0.95"
[1] "minimum sp abund = 50"

── Column specification ────────────────────────────────────────────────────────
cols(
  qua = col_double(),
  gx = col_double(),
  gy = col_double(),
  plot = col_double(),
  tag = col_character(),
  quadrat = col_character(),
  SPcode = col_character(),
  height = col_double(),
  date = col_character(),
  census = col_character(),
  year = col_double(),
  season = col_character(),
  survive = col_double(),
  CONS = col_double(),
  CONA = col_double(),
  HETA = col_double(),
  HETS = col_double(),
  Rainfall = col_double(),
  habitat = col_character()
)


── Column specification ────────────────────────────────────────────────────────
cols(
  qua = col_double(),
  habit3 = col_character(),
  seedtrap = col_double(),
  habit5 = col_character()
)


── Column specification ────────────────────────────────────────────────────────
cols(
  SPcode = col_character(),
  LDMC = col_double(),
  WD = col_double(),
  SDMC = col_double(),
  LA = col_double(),
  SLA = col_double(),
  Chl = col_double(),
  LT = col_double(),
  C13 = col_double(),
  C = col_double(),
  N = col_double(),
  CN = col_double(),
  tlp = col_double()
)

No. of species
76
[1] "Sp-level: 1 + PC1 + PC2 + PC3"
[1] "sp number in seedling data: 76"
[1] "sp number in trait data: 76"
data{
  int<lower=0> N; // number of sample
  int<lower=1> J; // number of sp
  int<lower=1> K; // number of tree-level preditor (i.e, CONS, HETS,...)
  int<lower=1> L; // number of sp-level predictor (i.e., interecept and WP)
  int<lower=1> M; // number of seedling individuals (tag)
  int<lower=1> S; // number of site
  int<lower=1> T; // number of census
  matrix[N, K] x; // tree-level predictor
  matrix[J, L] u; // sp-level predictor
  int<lower=0,upper=1> suv[N]; // 1 or 0
  int<lower=1,upper=J> sp[N]; // integer
  int<lower=1,upper=S> plot[N]; // integer
  int<lower=1,upper=T> census[N]; // integer
  int<lower=1> tag[N]; // integer
}

parameters{
  matrix[K, J] z;
  vector[S] phi_raw;
  vector[T] xi_raw;
  vector[M] psi_raw;
  matrix[L, K] gamma;
  cholesky_factor_corr[K] L_Omega;
  vector<lower=0,upper=pi()/2>[K] tau_unif;
  vector<lower=0,upper=pi()/2>[3] sig_unif;
}

transformed parameters{
  matrix[J, K] beta;
  vector<lower=0>[K] tau;
  vector<lower=0>[3] sig;
  vector[S] phi;
  vector[T] xi;
  vector[M] psi;
  for (k in 1:K) tau[k] = 2.5 * tan(tau_unif[k]); // implies tau ~ cauchy(0, 2.5)
  for (i in 1:3) sig[i] = 2.5 * tan(sig_unif[i]); // implies sig ~ cauchy(0, 2.5)
  beta = u * gamma + (diag_pre_multiply(tau,L_Omega) * z)';
  phi = phi_raw * sig[1];
  xi = xi_raw * sig[2];
  psi = psi_raw * sig[3];
}

model {
  // Hyper-priors
  to_vector(z) ~ std_normal();
  to_vector(phi_raw) ~ std_normal();
  to_vector(xi_raw) ~ std_normal();
  to_vector(psi_raw) ~ std_normal();
  L_Omega ~ lkj_corr_cholesky(2); // uniform of L_Omega * L_Omega'
  // Priors
  to_vector(gamma) ~ normal(0, 5);
  // Likelihood
  suv ~ bernoulli_logit(rows_dot_product(beta[sp] , x) + phi[plot] + xi[census] + psi[tag]);
}

generated quantities {
  vector[N] log_lik;
  corr_matrix[K] Omega;
  Omega = multiply_lower_tri_self_transpose(L_Omega);
  for (n in 1:N) {
    log_lik[n] = bernoulli_logit_lpmf(suv[n] | dot_product(beta[sp[n],] , x[n,]) + phi[plot[n]] + xi[census[n]] + psi[tag[n]]);
  }
}
[1] "use c = 0.24 as a scaling parameter for the distance effect"
[1] "n_sp = J =76"
[1] "n_para = K = 11"
[1] "n_plot = S = 384"
[1] "n_census = T = 10"
[1] "n_tag = M = 7859"

CHECKING DATA AND PREPROCESSING FOR MODEL 'model_inter' NOW.

COMPILING MODEL 'model_inter' NOW.

STARTING SAMPLER FOR MODEL 'model_inter' NOW.

CHECKING DATA AND PREPROCESSING FOR MODEL 'model_inter' NOW.

CHECKING DATA AND PREPROCESSING FOR MODEL 'model_inter' NOW.

COMPILING MODEL 'model_inter' NOW.

STARTING SAMPLER FOR MODEL 'model_inter' NOW.

COMPILING MODEL 'model_inter' NOW.

STARTING SAMPLER FOR MODEL 'model_inter' NOW.

CHECKING DATA AND PREPROCESSING FOR MODEL 'model_inter' NOW.

COMPILING MODEL 'model_inter' NOW.

STARTING SAMPLER FOR MODEL 'model_inter' NOW.

CHECKING DATA AND PREPROCESSING FOR MODEL 'model_inter' NOW.

COMPILING MODEL 'model_inter' NOW.

STARTING SAMPLER FOR MODEL 'model_inter' NOW.

SAMPLING FOR MODEL 'model_inter' NOW (CHAIN 1).

SAMPLING FOR MODEL 'model_inter' NOW (CHAIN 2).

SAMPLING FOR MODEL 'model_inter' NOW (CHAIN 3).

SAMPLING FOR MODEL 'model_inter' NOW (CHAIN 4).
Chain 3: 
Chain 3: Gradient evaluation took 0.028335 seconds
Chain 3: 1000 transitions using 10 leapfrog steps per transition would take 283.35 seconds.
Chain 3: Adjust your expectations accordingly!
Chain 3: 
Chain 3: 
Chain 2: 
Chain 2: Gradient evaluation took 0.03607 seconds
Chain 2: 1000 transitions using 10 leapfrog steps per transition would take 360.7 seconds.
Chain 2: Adjust your expectations accordingly!
Chain 2: 
Chain 2: 
Chain 1: 
Chain 1: Gradient evaluation took 0.036729 seconds
Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 367.29 seconds.
Chain 1: Adjust your expectations accordingly!
Chain 1: 
Chain 1: 
Chain 3: Iteration:    1 / 4000 [  0%]  (Warmup)
Chain 2: Iteration:    1 / 4000 [  0%]  (Warmup)
Chain 1: Iteration:    1 / 4000 [  0%]  (Warmup)
Chain 4: 
Chain 4: Gradient evaluation took 0.038956 seconds
Chain 4: 1000 transitions using 10 leapfrog steps per transition would take 389.56 seconds.
Chain 4: Adjust your expectations accordingly!
Chain 4: 
Chain 4: 
Chain 4: Iteration:    1 / 4000 [  0%]  (Warmup)
Chain 3: Iteration:  200 / 4000 [  5%]  (Warmup)
Chain 1: Iteration:  200 / 4000 [  5%]  (Warmup)
Chain 3: Iteration:  400 / 4000 [ 10%]  (Warmup)
Chain 4: Iteration:  200 / 4000 [  5%]  (Warmup)
Chain 2: Iteration:  200 / 4000 [  5%]  (Warmup)
Chain 1: Iteration:  400 / 4000 [ 10%]  (Warmup)
Chain 3: Iteration:  600 / 4000 [ 15%]  (Warmup)
Chain 2: Iteration:  400 / 4000 [ 10%]  (Warmup)
Chain 4: Iteration:  400 / 4000 [ 10%]  (Warmup)
Chain 1: Iteration:  600 / 4000 [ 15%]  (Warmup)
Chain 3: Iteration:  800 / 4000 [ 20%]  (Warmup)
Chain 2: Iteration:  600 / 4000 [ 15%]  (Warmup)
Chain 4: Iteration:  600 / 4000 [ 15%]  (Warmup)
Chain 1: Iteration:  800 / 4000 [ 20%]  (Warmup)
Chain 3: Iteration: 1000 / 4000 [ 25%]  (Warmup)
Chain 2: Iteration:  800 / 4000 [ 20%]  (Warmup)
Chain 4: Iteration:  800 / 4000 [ 20%]  (Warmup)
Chain 1: Iteration: 1000 / 4000 [ 25%]  (Warmup)
Chain 2: Iteration: 1000 / 4000 [ 25%]  (Warmup)
Chain 3: Iteration: 1200 / 4000 [ 30%]  (Warmup)
Chain 4: Iteration: 1000 / 4000 [ 25%]  (Warmup)
Chain 1: Iteration: 1200 / 4000 [ 30%]  (Warmup)
Chain 2: Iteration: 1200 / 4000 [ 30%]  (Warmup)
Chain 3: Iteration: 1400 / 4000 [ 35%]  (Warmup)
Chain 4: Iteration: 1200 / 4000 [ 30%]  (Warmup)
Chain 1: Iteration: 1400 / 4000 [ 35%]  (Warmup)
Chain 2: Iteration: 1400 / 4000 [ 35%]  (Warmup)
Chain 3: Iteration: 1600 / 4000 [ 40%]  (Warmup)
Chain 4: Iteration: 1400 / 4000 [ 35%]  (Warmup)
Chain 1: Iteration: 1600 / 4000 [ 40%]  (Warmup)
Chain 2: Iteration: 1600 / 4000 [ 40%]  (Warmup)
Chain 3: Iteration: 1800 / 4000 [ 45%]  (Warmup)
Chain 4: Iteration: 1600 / 4000 [ 40%]  (Warmup)
Chain 1: Iteration: 1800 / 4000 [ 45%]  (Warmup)
Chain 2: Iteration: 1800 / 4000 [ 45%]  (Warmup)
Chain 4: Iteration: 1800 / 4000 [ 45%]  (Warmup)
Chain 3: Iteration: 2000 / 4000 [ 50%]  (Warmup)
Chain 3: Iteration: 2001 / 4000 [ 50%]  (Sampling)
Chain 1: Iteration: 2000 / 4000 [ 50%]  (Warmup)
Chain 1: Iteration: 2001 / 4000 [ 50%]  (Sampling)
Chain 2: Iteration: 2000 / 4000 [ 50%]  (Warmup)
Chain 2: Iteration: 2001 / 4000 [ 50%]  (Sampling)
Chain 3: Iteration: 2200 / 4000 [ 55%]  (Sampling)
Chain 4: Iteration: 2000 / 4000 [ 50%]  (Warmup)
Chain 4: Iteration: 2001 / 4000 [ 50%]  (Sampling)
Chain 1: Iteration: 2200 / 4000 [ 55%]  (Sampling)
Chain 2: Iteration: 2200 / 4000 [ 55%]  (Sampling)
Chain 3: Iteration: 2400 / 4000 [ 60%]  (Sampling)
Chain 4: Iteration: 2200 / 4000 [ 55%]  (Sampling)
Chain 1: Iteration: 2400 / 4000 [ 60%]  (Sampling)
Chain 2: Iteration: 2400 / 4000 [ 60%]  (Sampling)
Chain 3: Iteration: 2600 / 4000 [ 65%]  (Sampling)
Chain 4: Iteration: 2400 / 4000 [ 60%]  (Sampling)
Chain 1: Iteration: 2600 / 4000 [ 65%]  (Sampling)
Chain 2: Iteration: 2600 / 4000 [ 65%]  (Sampling)
Chain 3: Iteration: 2800 / 4000 [ 70%]  (Sampling)
Chain 4: Iteration: 2600 / 4000 [ 65%]  (Sampling)
Chain 1: Iteration: 2800 / 4000 [ 70%]  (Sampling)
Chain 2: Iteration: 2800 / 4000 [ 70%]  (Sampling)
Chain 3: Iteration: 3000 / 4000 [ 75%]  (Sampling)
Chain 4: Iteration: 2800 / 4000 [ 70%]  (Sampling)
Chain 1: Iteration: 3000 / 4000 [ 75%]  (Sampling)
Chain 2: Iteration: 3000 / 4000 [ 75%]  (Sampling)
Chain 3: Iteration: 3200 / 4000 [ 80%]  (Sampling)
Chain 4: Iteration: 3000 / 4000 [ 75%]  (Sampling)
Chain 1: Iteration: 3200 / 4000 [ 80%]  (Sampling)
Chain 2: Iteration: 3200 / 4000 [ 80%]  (Sampling)
Chain 3: Iteration: 3400 / 4000 [ 85%]  (Sampling)
Chain 4: Iteration: 3200 / 4000 [ 80%]  (Sampling)
Chain 1: Iteration: 3400 / 4000 [ 85%]  (Sampling)
Chain 2: Iteration: 3400 / 4000 [ 85%]  (Sampling)
Chain 3: Iteration: 3600 / 4000 [ 90%]  (Sampling)
Chain 4: Iteration: 3400 / 4000 [ 85%]  (Sampling)
Chain 1: Iteration: 3600 / 4000 [ 90%]  (Sampling)
Chain 2: Iteration: 3600 / 4000 [ 90%]  (Sampling)
Chain 3: Iteration: 3800 / 4000 [ 95%]  (Sampling)
Chain 4: Iteration: 3600 / 4000 [ 90%]  (Sampling)
Chain 1: Iteration: 3800 / 4000 [ 95%]  (Sampling)
Chain 2: Iteration: 3800 / 4000 [ 95%]  (Sampling)
Chain 3: Iteration: 4000 / 4000 [100%]  (Sampling)
Chain 3: 
Chain 3:  Elapsed Time: 26108 seconds (Warm-up)
Chain 3:                8608.43 seconds (Sampling)
Chain 3:                34716.5 seconds (Total)
Chain 3: 
Chain 4: Iteration: 3800 / 4000 [ 95%]  (Sampling)
Chain 1: Iteration: 4000 / 4000 [100%]  (Sampling)
Chain 1: 
Chain 1:  Elapsed Time: 26498.8 seconds (Warm-up)
Chain 1:                8565.2 seconds (Sampling)
Chain 1:                35064 seconds (Total)
Chain 1: 
Chain 2: Iteration: 4000 / 4000 [100%]  (Sampling)
Chain 2: 
Chain 2:  Elapsed Time: 26854.6 seconds (Warm-up)
Chain 2:                8504.19 seconds (Sampling)
Chain 2:                35358.8 seconds (Total)
Chain 2: 
Chain 4: Iteration: 4000 / 4000 [100%]  (Sampling)
Chain 4: 
Chain 4:  Elapsed Time: 27159.6 seconds (Warm-up)
Chain 4:                8345.87 seconds (Sampling)
Chain 4:                35505.4 seconds (Total)
Chain 4: 
Warning messages:
1: There were 1 divergent transitions after warmup. See
http://mc-stan.org/misc/warnings.html#divergent-transitions-after-warmup
to find out why this is a problem and how to eliminate them. 
2: Examine the pairs() plot to diagnose sampling problems
 
Inference for Stan model: model_inter.
4 chains, each with iter=4000; warmup=2000; thin=1; 
post-warmup draws per chain=2000, total post-warmup draws=8000.

                 mean se_mean     sd      2.5%       25%       50%       75%
gamma[1,1]       2.84    0.01   0.31      2.20      2.64      2.84      3.04
gamma[1,2]      -0.26    0.01   0.41     -1.19     -0.50     -0.23      0.01
gamma[1,3]      -0.58    0.00   0.19     -0.96     -0.70     -0.57     -0.45
gamma[1,4]       0.11    0.00   0.06     -0.01      0.07      0.11      0.15
gamma[1,5]       0.05    0.00   0.11     -0.17     -0.02      0.05      0.12
gamma[1,6]       0.18    0.00   0.23     -0.26      0.03      0.18      0.32
gamma[1,7]       0.23    0.00   0.27     -0.28      0.04      0.22      0.40
gamma[1,8]      -0.02    0.00   0.10     -0.23     -0.08     -0.02      0.05
gamma[1,9]      -0.04    0.00   0.05     -0.13     -0.07     -0.04     -0.01
gamma[1,10]      0.07    0.00   0.06     -0.05      0.03      0.07      0.11
gamma[1,11]      1.20    0.00   0.10      1.01      1.13      1.20      1.27
gamma[2,1]      -0.11    0.00   0.12     -0.35     -0.19     -0.11     -0.02
gamma[2,2]      -0.10    0.00   0.17     -0.45     -0.20     -0.10      0.01
gamma[2,3]      -0.07    0.00   0.09     -0.25     -0.13     -0.07     -0.01
gamma[2,4]       0.00    0.00   0.03     -0.06     -0.02      0.00      0.02
gamma[2,5]       0.09    0.00   0.05      0.00      0.06      0.09      0.12
gamma[2,6]       0.03    0.00   0.07     -0.11     -0.02      0.03      0.08
gamma[2,7]       0.15    0.00   0.14     -0.10      0.05      0.14      0.23
gamma[2,8]      -0.04    0.00   0.05     -0.13     -0.07     -0.04     -0.01
gamma[2,9]       0.01    0.00   0.02     -0.04     -0.01      0.01      0.02
gamma[2,10]      0.02    0.00   0.03     -0.04      0.00      0.02      0.04
gamma[2,11]     -0.08    0.00   0.05     -0.19     -0.12     -0.08     -0.05
gamma[3,1]      -0.02    0.00   0.12     -0.26     -0.10     -0.01      0.07
gamma[3,2]      -0.08    0.00   0.15     -0.40     -0.17     -0.08      0.01
gamma[3,3]       0.07    0.00   0.11     -0.13      0.00      0.07      0.14
gamma[3,4]      -0.04    0.00   0.03     -0.09     -0.06     -0.04     -0.02
gamma[3,5]       0.01    0.00   0.05     -0.08     -0.02      0.01      0.04
gamma[3,6]      -0.03    0.00   0.06     -0.15     -0.06     -0.03      0.01
gamma[3,7]       0.02    0.00   0.11     -0.21     -0.05      0.02      0.09
gamma[3,8]      -0.01    0.00   0.05     -0.10     -0.04     -0.01      0.02
gamma[3,9]       0.05    0.00   0.02      0.01      0.04      0.05      0.07
gamma[3,10]      0.02    0.00   0.03     -0.03      0.00      0.02      0.04
gamma[3,11]     -0.10    0.00   0.06     -0.21     -0.14     -0.10     -0.06
gamma[4,1]      -0.50    0.00   0.16     -0.80     -0.61     -0.50     -0.39
gamma[4,2]       0.11    0.00   0.19     -0.27     -0.01      0.11      0.23
gamma[4,3]      -0.22    0.00   0.14     -0.49     -0.31     -0.22     -0.13
gamma[4,4]      -0.03    0.00   0.04     -0.11     -0.06     -0.03      0.00
gamma[4,5]       0.11    0.00   0.07     -0.02      0.06      0.11      0.15
gamma[4,6]       0.02    0.00   0.08     -0.14     -0.03      0.02      0.08
gamma[4,7]      -0.12    0.00   0.13     -0.39     -0.20     -0.12     -0.03
gamma[4,8]       0.04    0.00   0.07     -0.09      0.00      0.04      0.09
gamma[4,9]       0.02    0.00   0.03     -0.05      0.00      0.02      0.04
gamma[4,10]      0.02    0.00   0.04     -0.07     -0.01      0.02      0.05
gamma[4,11]     -0.02    0.00   0.08     -0.17     -0.07     -0.02      0.03
sig[1]           0.71    0.00   0.06      0.60      0.67      0.71      0.75
sig[2]           0.52    0.00   0.17      0.29      0.41      0.49      0.61
sig[3]           1.30    0.00   0.11      1.10      1.22      1.30      1.37
lp__        -11182.40    6.23 154.23 -11467.46 -11291.41 -11186.37 -11077.43
                97.5% n_eff Rhat
gamma[1,1]       3.45  2088    1
gamma[1,2]       0.45  1815    1
gamma[1,3]      -0.21  4503    1
gamma[1,4]       0.24  5072    1
gamma[1,5]       0.25  4447    1
gamma[1,6]       0.63  3162    1
gamma[1,7]       0.77  4462    1
gamma[1,8]       0.16  4910    1
gamma[1,9]       0.06  7704    1
gamma[1,10]      0.19  8010    1
gamma[1,11]      1.40  4344    1
gamma[2,1]       0.13  4044    1
gamma[2,2]       0.22  3548    1
gamma[2,3]       0.12  4520    1
gamma[2,4]       0.06  7067    1
gamma[2,5]       0.19  5980    1
gamma[2,6]       0.17  3595    1
gamma[2,7]       0.44  2976    1
gamma[2,8]       0.05  5158    1
gamma[2,9]       0.06  8572    1
gamma[2,10]      0.09  6977    1
gamma[2,11]      0.01  6713    1
gamma[3,1]       0.22  2939    1
gamma[3,2]       0.22  3547    1
gamma[3,3]       0.29  3989    1
gamma[3,4]       0.02  5980    1
gamma[3,5]       0.10  5685    1
gamma[3,6]       0.09  3836    1
gamma[3,7]       0.24  4390    1
gamma[3,8]       0.09  5332    1
gamma[3,9]       0.11  6269    1
gamma[3,10]      0.08  7110    1
gamma[3,11]      0.02  7532    1
gamma[4,1]      -0.17  3455    1
gamma[4,2]       0.48  5384    1
gamma[4,3]       0.05  4103    1
gamma[4,4]       0.06  6721    1
gamma[4,5]       0.24  5111    1
gamma[4,6]       0.18  4741    1
gamma[4,7]       0.14  6769    1
gamma[4,8]       0.17  5241    1
gamma[4,9]       0.08  7606    1
gamma[4,10]      0.10  8331    1
gamma[4,11]      0.13  6597    1
sig[1]           0.83  2150    1
sig[2]           0.95  2475    1
sig[3]           1.51   608    1
lp__        -10872.81   612    1

Samples were drawn using NUTS(diag_e) at Wed Aug 25 04:21:56 2021.
For each parameter, n_eff is a crude measure of effective sample size,
and Rhat is the potential scale reduction factor on split chains (at 
convergence, Rhat=1).
[1] "./rda/rainy_spab_50_model_inter_full_PCA_Full.rda"
[1] "MCMC done!!"
