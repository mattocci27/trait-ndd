---
title: "Diagnostics for MCMC"
author: "Masatoshi Katabuchi"
date: "`r format(Sys.time(), '%B %d, %Y')`"
fontsize: 12pt
format:
  html:
    theme: cosmo #readable #sandstone #spacelab #flatly
    # highlight: pygments #tango #kate
    toc: true
    toc-depth: 2
    number-sections: true
    smooth-scroll: true
    standalone: true
---

```{r global_options, include=FALSE}
library(knitr)
knitr::opts_chunk$set(
  collapse = TRUE,
  comment = "#>",
  message = FALSE,
  cache = FALSE,
  fig.align = "center",
  fig.show = "hold"
)
```

```{r}
library(tidyverse)
library(targets)
library(bayesplot)
library(kableExtra)
library(here)
library(jsonlite)
source(here("R", "stan.R"))
```

# Notes

- Abundance vs. traits
  - Abundance is the better predictor but we can show both results.
- Rain effects
  - Model with rain interaction effects actually did not work well for model with traits (the one we used in Ecology letters).
  - If we use model with rain interaction effects, we can see more traits that seem to show significant effects, but I'm not sure if these are reliable (the pattern is slightly different from our previous version).
- Trait effects
  - SDMC was the only trait that affects CNDD (`gamma[3,3]`) in dry season.
  - LDMC, SDMC and C13 directly affect the survival rates (not via NDD) in dry season.
  - In rainy season, C13 modified the effect of height on survival (`gamma[2,7]`).
- Abundance effect
  - The negative effect of abundance on the interaction between CNDD and rainfall (`gamma[11,2]`) indicates that abundant species suffer stronger CNDD (from adult trees) in wetter dry seasons (?).

# Model

- Season (2 combinations)
  - dry (`dry`)
  - rainy (`wet`)
- Rain effects (3 combinations)
  - without rain (`norain`)
  - no interaction with rain (`rain`)
  - with interaction of rain (`intrain`)
- Phylogeny effects (2 combinations)
  - without phylo (`het`)
  - with phylo (`phy`)
    - but phylo is not shown in this file because the pattern is too similar
- Species-level predictors
  - traits (`nlog`)
    - log-transformed traits
  - abundance
    - abundance (`ab`)
    - basal area (`ba`)
    - abundance + basal area (`ab1ba`)
    - abundance * basal area (`ab2ba`)

For example,
`fit_summary_logistic_stan_data_wet_het_intrain_ba`
indicates the model is based on rainy season, without phylogeny and with interactions of rains and density effects.

# MCMC diagnostics

## Effective sample size (ESS)

ESS < 400 suggests that MCMC is not that well convergent.

```{r}
withr::with_dir(rprojroot::find_root('_targets.R'),
  targets::tar_load(loo_list))
loo_names <- names(loo_list)
tmp <- str_replace_all(loo_names, "loo_fit_mcmc", "fit_summary")
tmp2 <- str_replace_all(loo_names, "loo_fit_mcmc", "fit_diagnostics")

for (i in 1:length(tmp)) {
  withr::with_dir(rprojroot::find_root('_targets.R'),
    targets::tar_load(tmp[i]))
  assign(loo_names[i], tmp[i])
  hoge <- get(tmp[i])

  ess_bulk <- hoge |>
    filter(ess_bulk < 400) |>
    nrow()

  if (ess_bulk > 0) {
    print(paste0(tmp[i], " has ", ess_bulk, " parameters with ess < 400"))
  }
}
```

## Divergence

```{r}
for (i in 1:length(tmp2)) {
  withr::with_dir(rprojroot::find_root('_targets.R'),
    targets::tar_load(tmp2[i]))
  hoge2 <- get(tmp2[i])
  divergent <- hoge2 |>
    filter(divergent__ != 0) |>
    nrow()
  if (divergent > 0) {
    print(paste0(tmp2[i], " has ", divergent, " divergences"))
  }
}
```

# Model selection

```{r}
withr::with_dir(rprojroot::find_root('_targets.R'),
  targets::tar_load(loo_list))

loo_list_ori <- loo_list
loo_list <- loo_list_ori[str_detect(names(loo_list_ori), "het")]
loo_list <- loo_list[!str_detect(names(loo_list), "_n$")]
loo_list <- loo_list[str_detect(names(loo_list), "simple")]
loo_names <- names(loo_list)

loo_names_split <- str_split_fixed(loo_names, "_", 11)

loo_tbl <- tibble(model = names(loo_list)) |>
  mutate(elpd = map_dbl(loo_list, \(x)x$elpd_loo)) |>
  mutate(p_loo = map_dbl(loo_list, \(x)x$p_loo)) |>
  mutate(looic = map_dbl(loo_list, \(x)x$looic)) |>
  mutate(season = loo_names_split[, 8]) |>
  mutate(phy = loo_names_split[, 9]) |>
  mutate(rain = loo_names_split[, 10]) |>
  mutate(traits = loo_names_split[, 11])
```

```{r, eval=FALSE, echo=FALSE}
library(tidyverse)
library(targets)
load("data-raw/dataCNDD.Rdata")

d <- tar_read(seedling_csv) |> read_csv()
lm(sphy ~ shet, data = d) |> summary()
lm(aphy ~ ahet, data = d) |> summary()

lm(as.numeric(dataseedling$sphy) ~ shet, data = dataseedling) |> summary()
lm(as.numeric(dataseedling$aphy) ~ ahet, data = dataseedling) |> summary()

plot(as.numeric(dataseedling$sphy) ~ shet, data = dataseedling)
plot(as.numeric(dataseedling$aphy) ~ ahet, data = dataseedling)

s1 <- tar_read(fit_summary_logistic_stan_data_dry_het_intrain_ab)
s2 <- tar_read(fit_summary_logistic_simple_stan_data_dry_het_intrain_ab)
s3 <- tar_read(check_ess_summary_logistic)
d3 <- tar_read(check_ess_diagnostics_logistic)

hoge <- tar_manifest()
hoge |>
  filter(str_detect(name, "summary"))

m1 <- tar_read(fit_mcmc_logistic_stan_data_dry_het_intrain_ab)
m2 <- tar_read(fit_mcmc_logistic_simple_stan_data_dry_het_intrain_ab)
m3 <- tar_read(check_ess_mcmc_logistic)
color_scheme_set("viridis")

bayesplot::mcmc_trace(m1$draws(), "lp__")
bayesplot::mcmc_trace(m2$draws(), "lp__")
bayesplot::mcmc_trace(m3$draws(), "lp__")

d1 <- tar_read(fit_diagnostics_logistic_stan_data_dry_het_intrain_ab)
d2 <- tar_read(fit_diagnostics_logistic_simple_stan_data_dry_het_intrain_ab)

loo_compare(loo_list[[1]], loo_list[[73]])
# dry_het_intrain_ab
```


```{r}
print_summary_tbl <- function(mcmc_summary, mcmc_stan_data, alpha = c(0.05, 0.01, 0.5)) {
  gamma_row <- mcmc_stan_data$x |> colnames()
  gamma_col <- mcmc_stan_data$u |> rownames()

  if (alpha == 0.05) {
    mcmc_summary <- mcmc_summary |>
     mutate(sig = ifelse(q2.5 * q97.5 > 0, "sig", "ns"))
  } else if (alpha == 0.1) {
    mcmc_summary <- mcmc_summary |>
     mutate(sig = ifelse(q5 * q95 > 0, "sig", "ns"))
  } else if (alpha == 0.5) {
    mcmc_summary <- mcmc_summary |>
     mutate(sig = ifelse(q25 * q75 > 0, "sig", "ns"))
  }

  mcmc_summary |>
    filter(str_detect(variable, "gamma")) |>
    filter(sig == "sig") |>
    mutate(gamma_row_num = str_split_fixed(variable,  "\\[|\\]|,", 4)[, 2] |>
      as.numeric()) |>
    mutate(gamma_col_num = str_split_fixed(variable,  "\\[|\\]|,", 4)[, 3] |>
      as.numeric()) |>
    mutate(ind_pred = gamma_row[gamma_row_num]) |>
    mutate(sp_pred = gamma_col[gamma_col_num]) |>
    dplyr::select(variable, ind_pred, sp_pred, q2.5, q5, q25, q50, q75, q95, q97.5) |>
    kbl() |>
    kable_styling(bootstrap_options = c("striped", "HOLD_position"))
}
```

```{r, eval=FALSE, include=FALSE}
hoge <- loo_tbl |>
  filter(str_detect(model, "dry")) |>
  filter(str_detect(model, "ab|ba")) |>
  arrange(-elpd) |>
  pull(model)

tmp <- str_replace(hoge[1], "loo_fit_mcmc", "fit_summary")
tmp_data <- str_replace(tmp, "fit_summary_logistic_simple_", "")
withr::with_dir(rprojroot::find_root('_targets.R'),
  targets::tar_load(tmp))
withr::with_dir(rprojroot::find_root('_targets.R'),
  targets::tar_load(tmp_data))

dry_ab_summary <- get(tmp)
dry_ab_data <- get(tmp_data)
```

```{r}
load_mcmc_summary <- function(loo_tbl, season = "dry", trait = "ab") {
  tmp <- loo_tbl |>
    filter(season == {{season}})
  tmp
  if (trait == "ab") {
    tmp <- tmp |>
      filter(str_detect(model, "ab|ba"))
  } else {
    tmp <- tmp |>
      filter(str_detect(model, "_nlog$"))
  }
  tmp <- tmp |>
    arrange(-elpd) |>
    pull(model)
  tmp_summary <- str_replace(tmp[1], "loo_fit_mcmc", "fit_summary")
  tmp_data <- str_replace(tmp_summary, "fit_summary_logistic_simple_", "")
  tmp_draws <- str_replace(tmp[1], "loo_fit_mcmc", "fit_draws")
  withr::with_dir(rprojroot::find_root('_targets.R'),
    targets::tar_load(tmp_summary))
  withr::with_dir(rprojroot::find_root('_targets.R'),
    targets::tar_load(tmp_data))
  withr::with_dir(rprojroot::find_root('_targets.R'),
    targets::tar_load(tmp_draws))
  list(
    name = tmp[1],
    data = get(tmp_data),
    summary = get(tmp_summary),
    draws = get(tmp_draws)
  )
}

dry_trait <- load_mcmc_summary(loo_tbl, season = "dry", trait = "n")
dry_abund <- load_mcmc_summary(loo_tbl, season = "dry", trait = "ab")

wet_trait <- load_mcmc_summary(loo_tbl, season = "wet", trait = "n")
wet_abund <- load_mcmc_summary(loo_tbl, season = "wet", trait = "ab")
```

These models with rain interactions are not good models.

```{r}
wet_trait2_summary <- withr::with_dir(rprojroot::find_root('_targets.R'),
    targets::tar_read(fit_summary_logistic_simple_stan_data_wet_het_intrain_nlog))
wet_trait2_draws <- withr::with_dir(rprojroot::find_root('_targets.R'),
    targets::tar_read(fit_draws_logistic_simple_stan_data_wet_het_intrain_nlog))
wet_trait2_data <- withr::with_dir(rprojroot::find_root('_targets.R'),
    targets::tar_read(stan_data_wet_het_intrain_nlog))

dry_trait2_summary <- withr::with_dir(rprojroot::find_root('_targets.R'),
    targets::tar_read(fit_summary_logistic_simple_stan_data_dry_het_intrain_nlog))
dry_trait2_draws <- withr::with_dir(rprojroot::find_root('_targets.R'),
    targets::tar_read(fit_draws_logistic_simple_stan_data_dry_het_intrain_nlog))
dry_trait2_data <- withr::with_dir(rprojroot::find_root('_targets.R'),
    targets::tar_read(stan_data_dry_het_intrain_nlog))
```

```{r, eval=FALSE, include=FALSE}
dry_abund2_summary <- withr::with_dir(rprojroot::find_root('_targets.R'),
    targets::tar_read(fit_summary_logistic_simple_stan_data_dry_het_intrain_ba))
dry_abund2_draws <- withr::with_dir(rprojroot::find_root('_targets.R'),
    targets::tar_read(fit_draws_logistic_simple_stan_data_dry_het_intrain_ba))
dry_abund2_data <- withr::with_dir(rprojroot::find_root('_targets.R'),
    targets::tar_read(stan_data_dry_het_intrain_ba))

wet_abund2_summary <- withr::with_dir(rprojroot::find_root('_targets.R'),
    targets::tar_read(fit_summary_logistic_simple_stan_data_wet_het_intrain_ba))
wet_abund2_draws <- withr::with_dir(rprojroot::find_root('_targets.R'),
    targets::tar_read(fit_draws_logistic_simple_stan_data_wet_het_intrain_ba))
wet_abund2_data <- withr::with_dir(rprojroot::find_root('_targets.R'),
    targets::tar_read(stan_data_wet_het_intrain_ba))

print_summary_tbl(dry_abund2_summary, dry_abund2_data, alpha = 0.05)
print_summary_tbl(wet_abund2_summary, wet_abund2_data, alpha = 0.05)
```


## Dry

### abundance

```{r}
loo_tbl |>
  filter(str_detect(model, "dry")) |>
  filter(str_detect(model, "ab|ba")) |>
  arrange(-elpd) |>
  DT::datatable()
```

```{r}
dry_abund$name
print_summary_tbl(dry_abund$summary, dry_abund$data, alpha = 0.05)
```

```{r}
# knitr::knit_exit()
```

### traits

```{r}
loo_tbl |>
  filter(str_detect(model, "dry")) |>
  filter(str_detect(model, "_n$|_nlog")) |>
  arrange(-elpd) |>
  DT::datatable()
```

```{r}
dry_trait$name
print_summary_tbl(dry_trait$summary, dry_trait$data, alpha = 0.05)
```



## Rainy

### abundance
```{r}
loo_tbl |>
  filter(str_detect(model, "wet")) |>
  filter(str_detect(model, "ab|ba")) |>
  arrange(-elpd) |>
  DT::datatable()
```

```{r}
wet_abund$name
print_summary_tbl(wet_abund$summary, wet_abund$data, alpha = 0.05)
```

### traits

```{r}
loo_tbl |>
  filter(str_detect(model, "wet")) |>
  filter(str_detect(model, "_n$|_nlog")) |>
  arrange(-elpd) |>
  DT::datatable()
```

```{r}
wet_trait$name
print_summary_tbl(wet_trait$summary, wet_trait$data, alpha = 0.05)
```

# Gamma (coef plot)


```{r, include=FALSE, eval=FALSE}
dry_trait$summary |>
  filter(str_detect(variable, "gamma")) |>
  filter(str_detect(variable, "1\\]$"))
```

```{r}
generate_coef_data <- function(draws, data, abund = TRUE, season = "Dry") {
  ind_pred_tmp <- data$x |> colnames()
  sp_pred_tmp <- data$u |> rownames()

  intervals_data <- mcmc_intervals_data(
    draws,
    regex_pars = "gamma",
    point_est = "median",
    prob = 0.5,
    prob_outer = 0.95) |>
    mutate(ind_pred = rep(ind_pred_tmp, length(sp_pred_tmp))) |>
    mutate(sp_pred = rep(sp_pred_tmp, each = length(ind_pred_tmp))) |>
    mutate(season = season) |>
    mutate(sig = ifelse(ll * hh > 0, "sig", "ns")) |>
    mutate(season_sig = paste0(season, "_", sig)) |>
    filter(str_detect(parameter, "1\\]$")) |>
    filter(parameter != "gamma[1,1]")

    if (abund)  {
    intervals_data |>
      mutate(para = factor(ind_pred,
        levels = c(
          "logh_s",
          "scon_s",
          "shet_s",
          "acon_s_c",
          "ahet_s_c",
          "rain_s",
          "logh_s:rain_s",
          "scon_s:rain_s",
          "shet_s:rain_s",
          "acon_s_c:rain_s",
          "ahet_s_c:rain_s"
        ) |> rev()))
    } else {
    intervals_data |>
      mutate(para = factor(ind_pred,
        levels = c(
          "logh_s",
          "scon_s",
          "shet_s",
          "acon_s_c",
          "ahet_s_c"
        ) |> rev()))
    }
}

gamma_lab <- c(
    # "(Intercept)" = expression(Intercept~(gamma["1,1"])),
    "logh_s" = expression(ln~Height~(gamma["2,1"])),
    "scon_s" = expression(ConS~(gamma["3,1"])),
    "shet_s" = expression(HetS~(gamma["4,1"])),
    "acon_s_c" = expression(ConT~(gamma["5,1"])),
    "ahet_s_c" = expression(HetT~(gamma["6,1"])),
    "rain_s" = expression(Rainfall~(gamma["7,1"])),
    "logh_s:rain_s" = expression(ln~Height%*%Rainfall~(gamma["8,1"])),
    "scon_s:rain_s" = expression(ConS%*%Rainfall~(gamma["9,1"])),
    "shet_s:rain_s" = expression(HetS%*%Rainfall~(gamma["10,1"])),
    "acon_s_c:rain_s" = expression(ConT%*%Rainfall~(gamma["11,1"])),
    "ahet_s_c:rain_s" = expression(HetT%*%Rainfall~(gamma["12,1"])))

my_col <- RColorBrewer::brewer.pal(5, "RdBu")
```

## Using abundance as individual-level predictors

```{r}

bind_rows(
  generate_coef_data(dry_abund$draws, dry_abund$data, abund = TRUE, season = "Dry"),
  generate_coef_data(wet_abund$draws, wet_abund$data, abund = TRUE, season = "Rainy")) |>
  ggplot(aes(y = para)) +
  geom_vline(xintercept = 0, lty = 2, col = "grey60") +
  geom_linerange(aes(xmin = ll, xmax = hh, col = season)) +
  geom_linerange(aes(xmin = l, xmax = h, col = season), size = 2) +
  geom_point(aes(x = m, col = season, fill = season_sig), shape = 21, size = 3) +
  facet_grid(~season) +
  scale_colour_manual(
    values = c(
      "Dry" = my_col[1],
      "Rainy" = my_col[5]
    )) +
  scale_fill_manual(
    values = c(
      "Dry_sig" = my_col[2],
      "Rainy_sig" = my_col[4],
      "Dry_ns" = my_col[3],
      "Rainy_ns" = my_col[3]
    )
  ) +
  scale_y_discrete(labels = gamma_lab) +
  ylab("") +
  xlab("Standardized coefficients") +
  theme_bw() +
  theme(
    legend.position = "none")
```

## Using traits as individual-level predictors

```{r}
bind_rows(
  generate_coef_data(dry_trait$draws, dry_trait$data, abund = FALSE, season = "Dry"),
  generate_coef_data(wet_trait$draws, wet_trait$data, abund = FALSE, season = "Rainy")) |>
  ggplot(aes(y = para)) +
  geom_vline(xintercept = 0, lty = 2, col = "grey60") +
  geom_linerange(aes(xmin = ll, xmax = hh, col = season)) +
  geom_linerange(aes(xmin = l, xmax = h, col = season), size = 2) +
  geom_point(aes(x = m, col = season, fill = season_sig), shape = 21, size = 3) +
  facet_grid(~season) +
  scale_colour_manual(
    values = c(
      "Dry" = my_col[1],
      "Rainy" = my_col[5]
    )) +
  scale_fill_manual(
    values = c(
      "Dry_sig" = my_col[2],
      "Rainy_sig" = my_col[4],
      "Dry_ns" = my_col[3],
      "Rainy_ns" = my_col[3]
    )
  ) +
  scale_y_discrete(labels = gamma_lab) +
  ylab("") +
  xlab("Standardized coefficients") +
  theme_bw() +
  theme(
    legend.position = "none")
```

## Using traits as individual-level predictors (not best model)

```{r test-coef}
bind_rows(
  generate_coef_data(dry_trait2_draws, dry_trait2_data, abund = TRUE, season = "Dry"),
  generate_coef_data(wet_trait2_draws, wet_trait2_data, abund = TRUE, season = "Rainy")) |>
  ggplot(aes(y = para)) +
  geom_vline(xintercept = 0, lty = 2, col = "grey60") +
  geom_linerange(aes(xmin = ll, xmax = hh, col = season)) +
  geom_linerange(aes(xmin = l, xmax = h, col = season), size = 2) +
  geom_point(aes(x = m, col = season, fill = season_sig), shape = 21, size = 3) +
  facet_grid(~season) +
  scale_colour_manual(
    values = c(
      "Dry" = my_col[1],
      "Rainy" = my_col[5]
    )) +
  scale_fill_manual(
    values = c(
      "Dry_sig" = my_col[2],
      "Rainy_sig" = my_col[4],
      "Dry_ns" = my_col[3],
      "Rainy_ns" = my_col[3]
    )
  ) +
  scale_y_discrete(labels = gamma_lab) +
  ylab("") +
  xlab("Standardized coefficients") +
  theme_bw() +
  theme(
    legend.position = "none")
```


# Species-level predictors ($\gamma$)

## Traits

### Without rain

```{r}
dry_trait$name
print_summary_tbl(dry_trait$summary, dry_trait$data, alpha = 0.05)
```


```{r}
wet_trait$name
print_summary_tbl(wet_trait$summary, wet_trait$data, alpha = 0.05)
```

### With rain (wiht interactions)

Note that these results are not that relable.

```{r}
print_summary_tbl(dry_trait2_summary, dry_trait2_data, alpha = 0.05)
```

```{r}
print_summary_tbl(wet_trait2_summary, wet_trait2_data, alpha = 0.05)
```

## Abundance

```{r}
dry_abund$name
print_summary_tbl(dry_abund$summary, dry_abund$data, alpha = 0.05)
```


```{r}
wet_abund$name
print_summary_tbl(wet_abund$summary, wet_abund$data, alpha = 0.05)
```


```{r}
knitr::knit_exit()
```
