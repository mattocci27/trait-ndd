---
title: "Diagnostics for MCMC"
author: "Masatoshi Katabuchi"
date: "`r format(Sys.time(), '%B %d, %Y')`"
fontsize: 12pt
format:
  html:
    theme: cosmo #readable #sandstone #spacelab #flatly
    # highlight: pygments #tango #kate
    toc: true
    toc-depth: 2
    number-sections: true
    smooth-scroll: true
    standalone: true
    embed-resources: true
---

```{r global_options, include=FALSE}
library(knitr)
knitr::opts_chunk$set(
  collapse = TRUE,
  comment = "#>",
  message = FALSE,
  cache = FALSE,
  fig.align = "center",
  fig.show = "hold"
)
```

```{r}
library(tidyverse)
library(targets)
library(bayesplot)
library(kableExtra)
library(here)
library(jsonlite)
source(here("R", "stan.R"))
source(here("R", "figs.R"))
```

# Notes

- Abundance vs. traits
  - Abundance is the better predictor but we can show both results.
- Phylogeny
  - Because conspecific densities and phylogenetically weighted densities are too similar (*R*^2^ > 0.98), basically there are no differences between those two models.
- Rain effects
  - Model with rain interaction effects worked well for model with traits only in dry seasons (the one we used in Ecology letters) but not in rainy seasons.
  - Model with rain interaction effects worked well for model with abundance.
- Trait effects
  - SDMC, LDMC and LT affect CNDD (or CNDD $\times$ rainfall) (`gamma[3,3]`, `gamma[8,2]`, `gamma[8,6]`) in dry season.
  - LDMC, SDMC and also C13 directly affect the survival rates (not via NDD) in dry season.
  - In rainy season, C13 modified the effect of height on survival (`gamma[2,7]`) (that's the only effect from the traits).
- Abundance effect
  - The negative effect of abundance on the interaction between CNDD and rainfall (`gamma[11,2]`) indicates that abundant species suffer stronger CNDD (from adult trees) in wetter dry seasons (?).

# Model

- Season (2 combinations)
  - dry (`dry`)
  - rainy (`wet`)
- Rain effects (3 combinations)
  - without rain (`norain`)
  - no interaction with rain (`rain`)
  - with interaction of rain (`intrain`)
  - with interaction of rain and conspecific seedling density (`intrain2`)
- Phylogeny effects (2 combinations)
  - without phylo (`het`)
  - with phylo (`phy`)
    - but phylo is not shown in this file because the pattern is too similar
- Species-level predictors
  - traits (`nlog`)
    - log-transformed traits
  - abundance
    - abundance (`ab`)
    - basal area (`ba`)
    - abundance + basal area (`ab1ba`)
    - abundance * basal area (`ab2ba`)

For example,
`fit_summary_logistic_stan_data_wet_het_intrain_ba`
indicates the model is based on rainy season, without phylogeny and with interactions of rains and density effects.

# MCMC diagnostics

## Effective sample size (ESS)

ESS < 400 suggests that MCMC is not that well convergent.

```{r}
withr::with_dir(rprojroot::find_root('_targets.R'),
  targets::tar_load(loo_list))
loo_names <- names(loo_list)
tmp <- str_replace_all(loo_names, "loo_fit_mcmc", "fit_summary")
tmp2 <- str_replace_all(loo_names, "loo_fit_mcmc", "fit_diagnostics")

for (i in 1:length(tmp)) {
  withr::with_dir(rprojroot::find_root('_targets.R'),
    targets::tar_load(tmp[i]))
  assign(loo_names[i], tmp[i])
  hoge <- get(tmp[i])

  ess_bulk <- hoge |>
    filter(ess_bulk < 400) |>
    nrow()

  if (ess_bulk > 0) {
    print(paste0(tmp[i], " has ", ess_bulk, " parameters with ess < 400"))
  }
}
```

## Divergence

```{r}
for (i in 1:length(tmp2)) {
  withr::with_dir(rprojroot::find_root('_targets.R'),
    targets::tar_load(tmp2[i]))
  hoge2 <- get(tmp2[i])
  divergent <- hoge2 |>
    filter(divergent__ != 0) |>
    nrow()
  if (divergent > 0) {
    print(paste0(tmp2[i], " has ", divergent, " divergences"))
  }
}
```

# Model selection

```{r, eval=FALSE}
withr::with_dir(rprojroot::find_root('_targets.R'),
  targets::tar_load(loo_list))

loo_list_ori <- loo_list
loo_list <- loo_list_ori[str_detect(names(loo_list_ori), "het")]
loo_list <- loo_list[!str_detect(names(loo_list), "_n$")]
loo_list <- loo_list[str_detect(names(loo_list), "simple")]
loo_names <- names(loo_list)

loo_names_split <- str_split_fixed(loo_names, "_", 11)

loo_tbl <- tibble(model = names(loo_list)) |>
  mutate(elpd = map_dbl(loo_list, \(x)x$elpd_loo)) |>
  mutate(p_loo = map_dbl(loo_list, \(x)x$p_loo)) |>
  mutate(looic = map_dbl(loo_list, \(x)x$looic)) |>
  mutate(season = loo_names_split[, 8]) |>
  mutate(phy = loo_names_split[, 9]) |>
  mutate(rain = loo_names_split[, 10]) |>
  mutate(traits = loo_names_split[, 11])
```
```{r}
withr::with_dir(rprojroot::find_root('_targets.R'),
  targets::tar_load(loo_tbl))
```

```{r, eval=FALSE, echo=FALSE}
library(tidyverse)
library(targets)
load("data-raw/dataCNDD.Rdata")

d <- tar_read(seedling_csv) |> read_csv()
lm(sphy ~ shet, data = d) |> summary()
lm(aphy ~ ahet, data = d) |> summary()

lm(as.numeric(dataseedling$sphy) ~ shet, data = dataseedling) |> summary()
lm(as.numeric(dataseedling$aphy) ~ ahet, data = dataseedling) |> summary()

plot(as.numeric(dataseedling$sphy) ~ shet, data = dataseedling)
plot(as.numeric(dataseedling$aphy) ~ ahet, data = dataseedling)

s1 <- tar_read(fit_summary_logistic_stan_data_dry_het_intrain_ab)
s2 <- tar_read(fit_summary_logistic_simple_stan_data_dry_het_intrain_ab)
s3 <- tar_read(check_ess_summary_logistic)
d3 <- tar_read(check_ess_diagnostics_logistic)

hoge <- tar_manifest()
hoge |>
  filter(str_detect(name, "summary"))

m1 <- tar_read(fit_mcmc_logistic_stan_data_dry_het_intrain_ab)
m2 <- tar_read(fit_mcmc_logistic_simple_stan_data_dry_het_intrain_ab)
m3 <- tar_read(check_ess_mcmc_logistic)
color_scheme_set("viridis")

bayesplot::mcmc_trace(m1$draws(), "lp__")
bayesplot::mcmc_trace(m2$draws(), "lp__")
bayesplot::mcmc_trace(m3$draws(), "lp__")

d1 <- tar_read(fit_diagnostics_logistic_stan_data_dry_het_intrain_ab)
d2 <- tar_read(fit_diagnostics_logistic_simple_stan_data_dry_het_intrain_ab)

loo_compare(loo_list[[1]], loo_list[[73]])
# dry_het_intrain_ab
```


```{r, eval=FALSE, include=FALSE}
hoge <- loo_tbl |>
  filter(str_detect(model, "dry")) |>
  filter(str_detect(model, "ab|ba")) |>
  arrange(-elpd) |>
  pull(model)

tmp <- str_replace(hoge[1], "loo_fit_mcmc", "fit_summary")
tmp_data <- str_replace(tmp, "fit_summary_logistic_simple_", "")
withr::with_dir(rprojroot::find_root('_targets.R'),
  targets::tar_load(tmp))
withr::with_dir(rprojroot::find_root('_targets.R'),
  targets::tar_load(tmp_data))

dry_ab_summary <- get(tmp)
dry_ab_data <- get(tmp_data)
```

```{r}
dry_trait <- load_mcmc_summary(loo_tbl, season = "dry", trait = "n")
dry_abund <- load_mcmc_summary(loo_tbl, season = "dry", trait = "ab")

wet_trait <- load_mcmc_summary(loo_tbl, season = "wet", trait = "n")
wet_abund <- load_mcmc_summary(loo_tbl, season = "wet", trait = "ab")
```

These models with rain interactions are not good models.

```{r}
wet_trait2_summary <- withr::with_dir(rprojroot::find_root('_targets.R'),
    targets::tar_read(fit_summary_logistic_simple_stan_data_wet_het_intrain_nlog))
wet_trait2_draws <- withr::with_dir(rprojroot::find_root('_targets.R'),
    targets::tar_read(fit_draws_logistic_simple_stan_data_wet_het_intrain_nlog))
wet_trait2_data <- withr::with_dir(rprojroot::find_root('_targets.R'),
    targets::tar_read(stan_data_wet_het_intrain_nlog))

dry_trait2_summary <- withr::with_dir(rprojroot::find_root('_targets.R'),
    targets::tar_read(fit_summary_logistic_simple_stan_data_dry_het_intrain_nlog))
dry_trait2_draws <- withr::with_dir(rprojroot::find_root('_targets.R'),
    targets::tar_read(fit_draws_logistic_simple_stan_data_dry_het_intrain_nlog))
dry_trait2_data <- withr::with_dir(rprojroot::find_root('_targets.R'),
    targets::tar_read(stan_data_dry_het_intrain_nlog))
```

```{r, eval=FALSE, include=FALSE}
dry_abund2_summary <- withr::with_dir(rprojroot::find_root('_targets.R'),
    targets::tar_read(fit_summary_logistic_simple_stan_data_dry_het_intrain_ba))
dry_abund2_draws <- withr::with_dir(rprojroot::find_root('_targets.R'),
    targets::tar_read(fit_draws_logistic_simple_stan_data_dry_het_intrain_ba))
dry_abund2_data <- withr::with_dir(rprojroot::find_root('_targets.R'),
    targets::tar_read(stan_data_dry_het_intrain_ba))

wet_abund2_summary <- withr::with_dir(rprojroot::find_root('_targets.R'),
    targets::tar_read(fit_summary_logistic_simple_stan_data_wet_het_intrain_ba))
wet_abund2_draws <- withr::with_dir(rprojroot::find_root('_targets.R'),
    targets::tar_read(fit_draws_logistic_simple_stan_data_wet_het_intrain_ba))
wet_abund2_data <- withr::with_dir(rprojroot::find_root('_targets.R'),
    targets::tar_read(stan_data_wet_het_intrain_ba))

print_summary_tbl(dry_abund2_summary, dry_abund2_data, alpha = 0.05)
print_summary_tbl(wet_abund2_summary, wet_abund2_data, alpha = 0.05)
```


## Dry

### abundance

```{r}
loo_tbl |>
  filter(str_detect(model, "dry")) |>
  filter(str_detect(model, "ab|ba")) |>
  arrange(-elpd) |>
  DT::datatable()
```

```{r}
dry_abund$name
print_summary_tbl(dry_abund$summary, dry_abund$data, alpha = 0.05)
```

```{r}
# knitr::knit_exit()
```

### traits

```{r}
loo_tbl |>
  filter(str_detect(model, "dry")) |>
  filter(str_detect(model, "_n$|_nlog")) |>
  arrange(-elpd) |>
  DT::datatable()
```

```{r}
dry_trait$name
print_summary_tbl(dry_trait$summary, dry_trait$data, alpha = 0.05)
```



## Rainy

### abundance
```{r}
loo_tbl |>
  filter(str_detect(model, "wet")) |>
  filter(str_detect(model, "ab|ba")) |>
  arrange(-elpd) |>
  DT::datatable()
```

```{r}
wet_abund$name
print_summary_tbl(wet_abund$summary, wet_abund$data, alpha = 0.05)
```

### traits

```{r}
loo_tbl |>
  filter(str_detect(model, "wet")) |>
  filter(str_detect(model, "_n$|_nlog")) |>
  arrange(-elpd) |>
  DT::datatable()
```

```{r}
wet_trait$name
print_summary_tbl(wet_trait$summary, wet_trait$data, alpha = 0.05)
```

# Gamma (coef plot)


```{r, include=FALSE, eval=FALSE}
dry_trait$summary |>
  filter(str_detect(variable, "gamma")) |>
  filter(str_detect(variable, "1\\]$"))
```

```{r}
gamma_lab <- c(
    # "(Intercept)" = expression(Intercept~(gamma["1,1"])),
    "logh_s" = expression(ln~Height~(gamma["2,1"])),
    "scon_s" = expression(ConS~(gamma["3,1"])),
    "shet_s" = expression(HetS~(gamma["4,1"])),
    "acon_s_c" = expression(ConT~(gamma["5,1"])),
    "ahet_s_c" = expression(HetT~(gamma["6,1"])),
    "rain_s" = expression(Rainfall~(gamma["7,1"])),
    "logh_s:rain_s" = expression(ln~Height%*%Rainfall~(gamma["8,1"])),
    "scon_s:rain_s" = expression(ConS%*%Rainfall~(gamma["9,1"])),
    "shet_s:rain_s" = expression(HetS%*%Rainfall~(gamma["10,1"])),
    "acon_s_c:rain_s" = expression(ConT%*%Rainfall~(gamma["11,1"])),
    "ahet_s_c:rain_s" = expression(HetT%*%Rainfall~(gamma["12,1"])))

my_col <- RColorBrewer::brewer.pal(5, "RdBu")
```

## Using abundance as individual-level predictors

```{r}
bind_rows(
  generate_coef_data(dry_abund$draws, dry_abund$data, abund = TRUE, season = "Dry"),
  generate_coef_data(wet_abund$draws, wet_abund$data, abund = TRUE, season = "Rainy")) |>
  ggplot(aes(y = para)) +
  geom_vline(xintercept = 0, lty = 2, col = "grey60") +
  geom_linerange(aes(xmin = ll, xmax = hh, col = season)) +
  geom_linerange(aes(xmin = l, xmax = h, col = season), size = 2) +
  geom_point(aes(x = m, col = season, fill = season_sig), shape = 21, size = 3) +
  facet_grid(~season) +
  scale_colour_manual(
    values = c(
      "Dry" = my_col[1],
      "Rainy" = my_col[5]
    )) +
  scale_fill_manual(
    values = c(
      "Dry_sig" = my_col[2],
      "Rainy_sig" = my_col[4],
      "Dry_ns" = my_col[3],
      "Rainy_ns" = my_col[3]
    )
  ) +
  scale_y_discrete(labels = gamma_lab) +
  ylab("") +
  xlab("Standardized coefficients") +
  theme_bw() +
  theme(
    legend.position = "none")
```

## Using traits as individual-level predictors

```{r}
bind_rows(
  generate_coef_data(dry_trait$draws, dry_trait$data, abund = FALSE, season = "Dry"),
  generate_coef_data(wet_trait$draws, wet_trait$data, abund = FALSE, season = "Rainy")) |>
  ggplot(aes(y = para)) +
  geom_vline(xintercept = 0, lty = 2, col = "grey60") +
  geom_linerange(aes(xmin = ll, xmax = hh, col = season)) +
  geom_linerange(aes(xmin = l, xmax = h, col = season), size = 2) +
  geom_point(aes(x = m, col = season, fill = season_sig), shape = 21, size = 3) +
  facet_grid(~season) +
  scale_colour_manual(
    values = c(
      "Dry" = my_col[1],
      "Rainy" = my_col[5]
    )) +
  scale_fill_manual(
    values = c(
      "Dry_sig" = my_col[2],
      "Rainy_sig" = my_col[4],
      "Dry_ns" = my_col[3],
      "Rainy_ns" = my_col[3]
    )
  ) +
  scale_y_discrete(labels = gamma_lab) +
  ylab("") +
  xlab("Standardized coefficients") +
  theme_bw() +
  theme(
    legend.position = "none")
```

## Using traits as individual-level predictors (not best model)

```{r test-coef}
bind_rows(
  generate_coef_data(dry_trait2_draws, dry_trait2_data, abund = TRUE, season = "Dry"),
  generate_coef_data(wet_trait2_draws, wet_trait2_data, abund = TRUE, season = "Rainy")) |>
  ggplot(aes(y = para)) +
  geom_vline(xintercept = 0, lty = 2, col = "grey60") +
  geom_linerange(aes(xmin = ll, xmax = hh, col = season)) +
  geom_linerange(aes(xmin = l, xmax = h, col = season), size = 2) +
  geom_point(aes(x = m, col = season, fill = season_sig), shape = 21, size = 3) +
  facet_grid(~season) +
  scale_colour_manual(
    values = c(
      "Dry" = my_col[1],
      "Rainy" = my_col[5]
    )) +
  scale_fill_manual(
    values = c(
      "Dry_sig" = my_col[2],
      "Rainy_sig" = my_col[4],
      "Dry_ns" = my_col[3],
      "Rainy_ns" = my_col[3]
    )
  ) +
  scale_y_discrete(labels = gamma_lab) +
  ylab("") +
  xlab("Standardized coefficients") +
  theme_bw() +
  theme(
    legend.position = "none")
```


# Species-level predictors ($\gamma$)

## Traits

### Without rain

```{r}
dry_trait$name
print_summary_tbl(dry_trait$summary, dry_trait$data, alpha = 0.05)
```


```{r}
wet_trait$name
print_summary_tbl(wet_trait$summary, wet_trait$data, alpha = 0.05)
```

### With rain (wiht interactions)

Note that these results are not that relable.

```{r}
print_summary_tbl(dry_trait2_summary, dry_trait2_data, alpha = 0.05)
```

```{r}
print_summary_tbl(wet_trait2_summary, wet_trait2_data, alpha = 0.05)
```

## Abundance

```{r}
dry_abund$name
print_summary_tbl(dry_abund$summary, dry_abund$data, alpha = 0.05)
```


```{r}
wet_abund$name
print_summary_tbl(wet_abund$summary, wet_abund$data, alpha = 0.05)
```

# Survival probability

## Traits

### Dry season

![dry_tarit_suv](`r here::here("figs/dry_trait_suv_contour.png")`)

- x and y axes are scaled values.
- Low and high traits values indicate 25% and 75% quantiles of the trait values, respecitely.


```{r}
knitr::knit_exit()
```

```{r}
library(patchwork)
p1 <- generate_suv_pred(dry_trait$summary, dry_trait$data, alpha = 0.05, 2) |>
  subplot_fun(low = TRUE) +
  ggtitle("Low LDMC")
p2 <- generate_suv_pred(dry_trait$summary, dry_trait$data, alpha = 0.05, 2) |>
  subplot_fun(low = FALSE) +
  ggtitle("High LDMC")
p3 <- generate_suv_pred(dry_trait$summary, dry_trait$data, alpha = 0.05, 3) |>
  subplot_fun(low = TRUE) +
  ggtitle("Low SDMC")
p4 <- generate_suv_pred(dry_trait$summary, dry_trait$data, alpha = 0.05, 3) |>
  subplot_fun(low = FALSE) +
  ggtitle("High SDMC")
p5 <- generate_suv_pred(dry_trait$summary, dry_trait$data, alpha = 0.05, 6) |>
  subplot_fun(low = TRUE) +
  ggtitle("Low LT")
p6 <- generate_suv_pred(dry_trait$summary, dry_trait$data, alpha = 0.05, 6) |>
  subplot_fun(low = FALSE) +
  ggtitle("High LT")
p7 <- generate_suv_pred(dry_trait$summary, dry_trait$data, alpha = 0.05, 7) |>
  subplot_fun(low = TRUE) +
  ggtitle("Low C13")
p8 <- generate_suv_pred(dry_trait$summary, dry_trait$data, alpha = 0.05, 7) |>
  subplot_fun(low = FALSE) +
  ggtitle("High C13")

(p1 + p2) / (p3 + p4) / (p5 + p6) / (p7 + p8)
```


# Suv vs cons

```{r, eval=FALSE}
library(tidyverse)
library(targets)
library(bayesplot)
library(kableExtra)
library(here)
library(jsonlite)
source(here("R", "stan.R"))

set.seed(123)

d <- tar_read(seedling_csv) |> read_csv()
trait <- tar_read(trait_csv) |> read_csv()

trait |>
  arrange(latin)

pca <- prcomp(trait[,3:14], scale = TRUE)

prcomp(t(dry_trait$data$u)) |> summary()

plot(SDMC ~ LDMC, trait)
plot(LT ~ LDMC, log = "y", trait)

sum(d$surv) / nrow(d)

dry_trait$summary |>
  filter(str_detect(variable, "beta\\[3"))

b3 <- dry_trait$draws |>
  select(matches("beta\\[3"))
b1 <- dry_trait$draws |>
  select(matches("beta\\[1"))

b3_long <- b3 |>
  pivot_longer(1:ncol(b3))
b1_long <- b1 |>
  pivot_longer(1:ncol(b1))

library(ggridges)
# library(httpgd)
# .vsc.attach()

ggplot(b3_long, aes(x = value, y = name)) +
  geom_density_ridges()

b3_bar <- b3_long |>
  group_by(name) |>
  summarize(mid = median(value),
    ll = quantile(value, 0.025),
    l = quantile(value, 0.05),
    h = quantile(value, 0.75),
    hh = quantile(value, 0.975)
  )

b1_bar <- b1_long |>
  group_by(name) |>
  summarize(mid = median(value),
    ll = quantile(value, 0.025),
    l = quantile(value, 0.05),
    h = quantile(value, 0.75),
    hh = quantile(value, 0.975)
  )

b3_bar |>
  ggplot(aes(x = name)) +
  geom_errorbar(aes(ymin = ll, ymax = hh)) +
  geom_errorbar(aes(ymin = l, ymax = h), size = 2) +
  geom_hline(yintercept = 0)

logistic <- function(z) 1 / (1 + exp(-z))

scon_data <- d |>
  mutate(scon_s = scale(scon) |> as.numeric()) |>
  filter(season == "dry") |>
  group_by(latin) |>
  summarize(scon_min = min(scon_s), scon_max = max(scon_s))

hoge <- tibble(b1 = b1_bar$mid,
  b3 = b3_bar$mid) |>
  bind_cols(scon_data)  |>
  group_by(latin) |>
  nest() |>
  mutate(xx = map(data, \(x)seq(x$scon_min, x$scon_max, length = 80))) |>
  mutate(yy = map2(data, xx, \(data, xx) data$b1 + data$b3 * xx)) |>
  mutate(suv = map(yy, logistic))

hoge2 <- hoge |>
  unnest()

ggplot(hoge2, aes(x = xx, y = suv, group = latin)) +
  geom_line()

  sp = paste0("sp", 1:73)) |>
  ggplot() +
  geom_abline(aes(slope = slope, intercept = int, group = sp))

```

```{r}
dry_trait$summary

dry_trait$summary |>
  filter(q2.5 * q97.5 > 0) |>
  filter(str_detect(variable, "gamma")) |>
  dplyr::select(variable, q50)

```

```{r, eval=FALSE}
g11 <- 2.33
g31 <- -1.48
g33 <- 1.95
#g33 <-  0.57
g12 <- -1.3
g72 <- -0.8
g82 <- -1.23
g73 <- 0.49

cons <- seq(-2, 2, length = 20)
rain <- seq(-2, 2, length = 20)
tmp <- expand_grid(cons, rain)

# high SDMC
tu <- t(dry_trait$data$u)
ldmc_v <- tu[,2]
sdmc_v <- tu[,3]

sdmc <- sdmc_v[3]
ldmc <- ldmc_v[3]

#sdmc <- 1
beta_cons <- g31 + g33 * sdmc
beta_rain <- g73 * sdmc
beta_int <- g11
suv <- beta_int + beta_cons * cons + beta_rain * rain

# ldmc <- -2
# beta_rain <- g72 * ldmc
# beta_cons_rain <- g82 * ldmc
# beta_cons <- g31
# beta_int <- g11 + g12 * ldmc
# suv <- beta_int + beta_cons * cons + beta_rain * rain + beta_cons_rain * cons * rain

#ldmc <- -2
beta_rain <- g73 * sdmc + g72 * ldmc
beta_cons_rain <- g82 * ldmc
beta_cons <- g31 + g33 * sdmc
beta_int <- g11 + g12 * ldmc
suv <- beta_int + beta_cons * cons + beta_rain * rain + beta_cons_rain * cons * rain
logit <- function(z) 1 / (1 + exp(-z))

tmp2 <- tmp |>
  mutate(suv_z = g11 + beta_cons * cons + beta_rain * rain)  |>
  mutate(suv_p = logit(suv_z))

ggplot(tmp2, aes(x = cons, y = rain, fill = suv_p, z = suv_p)) +
  geom_tile() +
  geom_contour() +
  # scale_fill_viridis_c()
  scale_fill_gradient2(
    # low = "blue",
    # high = "yellow",
    midpoint = 0.86)

```

```{r}

prepare_suv_pred(dry_trait$summary, dry_trait$data, alpha = 0.05) |>
  filter(sig == "sig") |>
  kbl() |>
  kable_styling(bootstrap_options = c("striped", "HOLD_position"))

gamma <- matrix(tmp$q50, nrow = 8)


tmp <- generate_suv_pred(dry_trait$summary, dry_trait$data, alpha = 0.05, 7)

p1 <- generate_suv_pred(dry_trait$summary, dry_trait$data, alpha = 0.05, 2) |>
  subplot_fun()
p2 <- generate_suv_pred(dry_trait$summary, dry_trait$data, alpha = 0.05, 3) |>
  subplot_fun()
p3 <- generate_suv_pred(dry_trait$summary, dry_trait$data, alpha = 0.05, 6) |>
  subplot_fun()
p4 <- generate_suv_pred(dry_trait$summary, dry_trait$data, alpha = 0.05, 7) |>
  subplot_fun()

p1 / p2 / p3 / p4

p1 <- ggplot(tmp, aes(x = scon, y = rain, fill = suv_p_l, z = suv_p_l)) +
  geom_tile() +
  geom_contour(col = "grey40") +
  scale_fill_viridis_c(option = "B")  +
  theme(legend.position = "none")
p2 <- ggplot(tmp, aes(x = scon, y = rain, fill = suv_p_m, z = suv_p_m)) +
  geom_tile() +
  geom_contour(col = "grey40") +
  scale_fill_viridis_c(option = "B") +
  theme(legend.position = "none")
p3 <- ggplot(tmp, aes(x = scon, y = rain, fill = suv_p_h, z = suv_p_h)) +
  geom_tile() +
  geom_contour(col = "grey40") +
  scale_fill_viridis_c(option = "B") +
  theme(legend.position = "none")
p1 + p3

library(viridis)
colors <- viridis(3)
rgb(colors)

```



```{r}
knitr::knit_exit()
```
